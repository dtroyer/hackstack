<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">HackStack Posts</title>
  <subtitle type="text">OpenStack and other hackish things</subtitle>

  <updated>2014-09-15T21:49:32Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://hackstack.org/x/blog" />
  <id>http://hackstack.org/x/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://hackstack.org/x/blog/feed/atom/" />
  <entry>
    <author>
      <name>dtroyer</name>
      <uri>http://hackstack.org/x/blog</uri>
    </author>
    <title type="html"><![CDATA[OpenStackClient Plugins]]></title>
    <link rel="alternate" type="text/html" href="http://hackstack.org/x/blog/2014/01/14/openstackclient-plugins" />
    <id>http://hackstack.org/x/blog/2014/01/14/openstackclient-plugins</id>
    <updated>2014-01-14T01:14:00Z</updated>
    <published>2014-01-14T01:14:00Z</published>
    <category scheme="http://hackstack.org/x/blog" term="openstackclient" />
    <summary type="html"><![CDATA[OpenStackClient Plugins]]></summary>
    <content type="html" xml:base="http://hackstack.org/x/blog/2014/01/14/openstackclient-plugins"><![CDATA[<div class="document">
<p>OpenStackClient (OSC) has been in my project queue for almost two years now.  It was Feb 2012 that I stayed up all night mucking about with something called DrStack with the goal of combining the then four OpenStack CLI binaries into a single command set.</p>
<p>OSC is the second major realization of that goal having a greatly improved internal command architecture courtesy of dhellmann's Cliff framework.  It also somehow got an informal blessing without becoming an official project, a status that it still carries.  We have a roadmap of where to go with that but that is a topic for another day.</p>
<p>Today we talk plugins!</p>
<p>Yes, I know, that is an overused term in OpenStack, where everything seems to be a plugin or an extension or optional in some way.  But I don't have anything better at the moment so plugin it is.</p>
<div class="section" id="openstackclient-plugins">
<h1>OpenStackClient Plugins</h1>
<p>OSC development has been a series of quiet periods interspersed with bouts of furious activity.  Fast-forward to last month (Dec 2013) and the introduction of a viable command plugin system for OSC first released in version 0.3.0.  The OSC side is documented in the <a class="reference external" href="http://docs.openstack.org/developer/python-openstackclient/plugins.html">OpenStackClient Developer Documentation</a>.</p>
<div class="section" id="goals">
<h2>Goals</h2>
<p>The previous OSC plugin mechanism was too naive and did not allow for adding client objects to the ClientManager. We needed to:</p>
<ul class="simple">
<li>define an initialization to add global options for API versions and whatnot (parser phase)</li>
<li>define an initialization function(s) to select an API version add an appropriate client to the ClientManager (client phase)</li>
</ul>
</div>
<div class="section" id="implementation">
<h2>Implementation</h2>
<p>As an exercise to validate the completeness of the plugin mechanism, the Compute, Image and Volume API commands were converted to initialize via the plugin mechanism.  The only difference from an external plugin is that they are included in the OSC repo.</p>
<p>The new plugin mechanism builds on the use of <a class="reference external" href="https://pypi.python.org/pypi/cliffâ€Ž">Cliff</a> to dynamically load the command classes and modifies the existing OSC <tt class="docutils literal">ClientManager</tt> to define the client objects to be instantiated at run-time.  This allows additional clients to insert themselves into the <tt class="docutils literal">ClientManager</tt>.</p>
<p>OSC looks for plugins that register their client class under <tt class="docutils literal">openstack.cli.extension</tt>.  The key is the API name and must be unique for all plugins, the value is the module name that contains the public initialization functions.</p>
<p>The initialization module is typically names <tt class="docutils literal"><span class="pre">&lt;project-name&gt;.client</span></tt>, although there is no technical requirement to follow this convention.  It was adopted as that was already the name of the modules used by the built-in API classes.</p>
<p>The initialization module must implement a set of constants that are used to identify the plugin and two functions that instantiate the actual API client class and define any global options required.</p>
</div>
</div>
<div class="section" id="python-oscplugin">
<h1>python-oscplugin</h1>
<p>Since most actual OSC plugins are not going to be part of the repo, we created a sample plugin in a stand-alone project to demonstrate the bits required.  <a class="reference external" href="https://github.com/dtroyer/python-oscplugin">python-oscplugin</a> began life as a <a class="reference external" href="https://github.com/openstack-dev/cookiecutter">cookiecutter</a> project (worth using to bootstrap a project in the OpenStack-way) and expanded to become a simple demonstration of an OSC command plugin.</p>
<p>So let's walk through the sample plugin to see how this works...</p>
<div class="section" id="plugin-initialization">
<h2>Plugin Initialization</h2>
<p>It all starts with the initialization module, here named <tt class="docutils literal">oscplugin.plugin</tt>, defining the rest of the identifiers used to locate plugin bits.  Naming this module is flexible, it just needs to be specified in the <tt class="docutils literal">openstack.cli.extension</tt> entry point group.</p>
<ul class="simple">
<li><tt class="docutils literal">API_NAME</tt> - A short string describing the API or command set name.  It is used in the entry point group name and is the key name in the <tt class="docutils literal">openstack.cli.extension</tt> group to identify the plugin.  Must be a valid Python identifier string.</li>
<li><tt class="docutils literal">API_VERSION_OPTION</tt> - An optional name of the API version attribute used in the global command-line options to specify an API version.  It will be used in <tt class="docutils literal">build_option_parser()</tt> if setting an API version is required.  Must be a valid Python identifier string.</li>
<li><tt class="docutils literal">API_VERSIONS</tt> - A dict mapping version strings to client class names.</li>
</ul>
<p>Two functions are required that perform the initialization work for the plugin.</p>
<ul class="simple">
<li><tt class="docutils literal">build_option_parser()</tt> - The top-level parser object is passed in and available to add plugin-specific options, usually an API version selector.</li>
<li><tt class="docutils literal">make_client()</tt> - Instantiate the actual client object taking in to consideration any version that may be specified.  The mapping of version to client class is handled here.  Also, any authentication or service selection the specific client requires is passed in here.</li>
</ul>
</div>
<div class="section" id="client-api">
<h2>Client API</h2>
<p><tt class="docutils literal"><span class="pre">python-oscplugin</span></tt> contains its own equivalent to a client API object.  In this case it is just a placeholder as the <tt class="docutils literal">plugin</tt> commands do not have an external client library.  For most API clients this is the actual client class, such as <tt class="docutils literal">glanceclient.v2.client.Client</tt> for the Image v2 API.</p>
<p>There are cases where the API client class is insufficient for some reason and adaptations are required.  The Image v1 client is a good example.  The ImageManager class in <tt class="docutils literal">glanceclient</tt> does not have a <tt class="docutils literal">find()</tt> method so we implemented one in <tt class="docutils literal">openstackclient.image.client.Client_v1</tt> that uses <tt class="docutils literal">openstackclient.image.client.ImageManager_v1</tt> with added <tt class="docutils literal">find()</tt> and <tt class="docutils literal">findall()</tt> methods.</p>
</div>
<div class="section" id="commands">
<h2>Commands</h2>
<p>The commands implemented in <tt class="docutils literal"><span class="pre">python-oscplugin</span></tt> are in <tt class="docutils literal">oscplugin.v1.plugin</tt> and follow the basic pattern used by the other OSC command classes.  Again they are mostly placeholders here.</p>
</div>
<div class="section" id="tests">
<h2>Tests</h2>
<p>The structure of the tests also follows that of the existing OSC API commands.  They use <tt class="docutils literal">mock</tt> and fakes to perform unit tests on the command classes.</p>
</div>
<div class="section" id="project-stuff">
<h2>Project Stuff</h2>
<p>Ad <tt class="docutils literal"><span class="pre">python-oscplugin</span></tt> was created using <a class="reference external" href="https://github.com/openstack-dev/cookiecutter">cookiecutter</a> it includes the usual OpenStack features such as <tt class="docutils literal">pbr</tt> and friends.  The specific bits pertaining to an OSC plugin:</p>
<ul>
<li><p class="first"><tt class="docutils literal">setup.cfg</tt> - All of the plugin-specific content is in the <tt class="docutils literal">[entry_points]</tt> section:</p>
<pre class="literal-block">
[entry_points]
openstack.cli.extension =
    oscplugin = oscplugin.plugin

openstack.oscplugin.v1 =
    plugin_list = oscplugin.v1.plugin:ListPlugin
    plugin_show = oscplugin.v1.plugin:ShowPlugin
</pre>
</li>
</ul>
<p>Note that OSC defines the group name as <tt class="docutils literal"><span class="pre">openstack.&lt;api-name&gt;.v&lt;version&gt;</span></tt>
so the version should not contain the leading 'v' character.</p>
<ul class="simple">
<li><tt class="docutils literal">requirements.txt</tt> - We've added  <tt class="docutils literal">openstackclient</tt> as <tt class="docutils literal"><span class="pre">python-oscplugin</span></tt> is useless without it.  <tt class="docutils literal">keystoneclient</tt> is here too, while <tt class="docutils literal"><span class="pre">python-oscplugin</span></tt> does not require it, most OpenStack API clients will.  <tt class="docutils literal">cliff</tt> is also needed here.</li>
<li><tt class="docutils literal"><span class="pre">test-requirements.txt</span></tt> - <tt class="docutils literal">mock</tt> is required for testing.</li>
</ul>
</div>
<div class="section" id="a-note-about-versions">
<h2>A Note About Versions</h2>
<p>Internally OSC uses the convention <tt class="docutils literal">vXXX</tt> for version identifiers, where <tt class="docutils literal">XXX</tt> is a valid Python identifier in its own right (i.e., uses '_' rather than '.' internally).  OSC adds the leading 'v' so versions expressed in constant declarations should not include it.</p>
</div>
</div>
<div class="section" id="eot">
<h1>EOT</h1>
<p>The plugin structure should allow any base install of OSC to be extended simply by installing the desired client package.  Af of right now there are no other clients that implement the plugin, but that will be changing soon.  Film at eleven...</p>
</div>
</div>
]]></content>
  </entry>
</feed>
