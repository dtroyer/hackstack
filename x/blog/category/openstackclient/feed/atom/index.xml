<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">HackStack Posts</title>
  <subtitle type="text">OpenStack and other hackish things</subtitle>

  <updated>2017-04-14T17:40:46Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://hackstack.org/x/blog" />
  <id>http://hackstack.org/x/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://hackstack.org/x/blog/feed/atom/" />
  <entry>
    <author>
      <name>dtroyer</name>
      <uri>http://hackstack.org/x/blog</uri>
    </author>
    <title type="html"><![CDATA[Client Cloud Configuration]]></title>
    <link rel="alternate" type="text/html" href="http://hackstack.org/x/blog/2015/04/30/client-cloud-configuration" />
    <id>http://hackstack.org/x/blog/2015/04/30/client-cloud-configuration</id>
    <updated>2015-04-30T15:04:30Z</updated>
    <published>2015-04-30T15:04:30Z</published>
    <category scheme="http://hackstack.org/x/blog" term="openstackclient" />
    <summary type="html"><![CDATA[Client Cloud Configuration]]></summary>
    <content type="html" xml:base="http://hackstack.org/x/blog/2015/04/30/client-cloud-configuration"><![CDATA[<div class="document">
<p>or</p>
<div class="section" id="how-i-learned-to-love-the-lack-of-environment-variables">
<h1>How I Learned to Love the Lack of Environment Variables</h1>
<p><a class="reference external" href="/x/blog/2014/10/24/how-dost-thy-cloud-know-me-let-me-count-the-ways/">Previously</a> I
posted a preview of my favorite new feature of OpenStackClient, support for
cloud configuration files and the new <tt class="docutils literal"><span class="pre">--os-cloud</span></tt> global option.  Who knew it
would take six months to get it done and released?  There is some merely
adequate documentation of the <strong>Client Cloud Configuration</strong> (or CCC) operation
in the <a class="reference external" href="http://docs.openstack.org/developer/python-openstackclient/configuration.html#configuration-files">OSC Configuration docs</a>, but this is too good to leave to official
docs alone.</p>
<p>CCC was actually introduced in OSC release 1.1.0, which is the basis for compatibility
with Liberty dependency requirements.  But like the rest of OSC, it works just fine
with all of the supported OpenStack releases.</p>
<div class="section" id="overview">
<h2>Overview</h2>
<p>The TL;DR for Client Cloud Configuration is take a global public cloud configuration
file, add to it local clouds and/or public cloud authentication and region details
and use them with a single command line option or environment variable and
forget sourcing many <tt class="docutils literal">openrc</tt>-like files.</p>
</div>
<div class="section" id="clouds-yaml">
<h2>clouds.yaml</h2>
<p>It all starts with the <tt class="docutils literal">clouds.yaml</tt> file that contains your cloud configuration
details.  This is really the only file required to use <tt class="docutils literal"><span class="pre">--os-cloud</span></tt> and defines
its available arguments.  OSC searches the following directories for <tt class="docutils literal">clouds.yaml</tt>
and uses only the first one it finds:</p>
<pre class="literal-block">
* the current directory
* ``~/.config/openstack``, aka ``$XDG_CONFIG_HOME/openstack``
* ``/etc/openstack``
</pre>
<p><tt class="docutils literal"><span class="pre">~/.config</span></tt> is a well-known directory defined by the freedesktop.org <a class="reference external" href="http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html">XDG Base Directory Specification</a>.  If
<tt class="docutils literal">XDG_CONFIG_HOME</tt> is defined, it will be used in place of <tt class="docutils literal"><span class="pre">~/.config</span></tt>.</p>
<p><tt class="docutils literal">clouds.yaml</tt> defines a list of clouds, the key for each cloud definition is
shockingly the argument used with the <tt class="docutils literal"><span class="pre">--os-cloud</span></tt> option.  Each cloud definition
is made up of a list of keys that correspond to OSC's global options.  One special
item in this list is <tt class="docutils literal">auth</tt>, which contains all of the authentication-related options.
A bare-minimum <tt class="docutils literal">clouds.yaml</tt> that works with a default DevStack installation
(using Identity v2) looks like this:</p>
<pre class="literal-block">
clouds:
  devstack:
    auth:
      auth_url: http://127.0.0.1:35357/
      project_name: demo
      username: demo
      password: 0penstack
    region_name: RegionOne
</pre>
<p>With that configuration, you can skip sourcing <tt class="docutils literal">openrc</tt> and do this:</p>
<pre class="literal-block">
openstack --os-cloud devstack token issue
</pre>
<p>to get a token from the running cloud.</p>
</div>
<div class="section" id="clouds-public-yaml">
<h2>clouds-public.yaml</h2>
<p>Duplicating the configuration for public clouds (or private clouds within an
organization) gets tedious, thus the motivation for <tt class="docutils literal"><span class="pre">clouds-public.yaml</span></tt>.
The search path is the same as for <tt class="docutils literal">clouds.yaml</tt>, in fact it is basically
the same file except that the top-level key is <tt class="docutils literal"><span class="pre">public-clouds</span></tt>.</p>
<p>I should also note that a small set of public OpenStack clouds is also
built-in to OSC so they can be referenced automatically.  Here is an sample of the
current built-in configuration:</p>
<pre class="literal-block">
public-clouds:
    hp:
        auth:
            auth_url: https://region-b.geo-1.identity.hpcloudsvc.com:35357/v2.0
        region_name: region-b.geo-1
        dns_service_type: 'hpext:dns'
        image_api_version: 1
        image_format: qcow2
    rackspace:
        auth:
            auth_url: https://identity.api.rackspacecloud.com/v2.0/
        database_service_type: 'rax:database'
        compute_service_name: cloudServersOpenStack
        image_api_version: 2
        image_api_use_tasks: True
        image_format: vhd
    dreamhost:
        auth:
            auth_url: https://keystone.dream.io/v2.0
        region_name: RegionOne
        image_api_version: 2
        image_format: raw
</pre>
<p>Note that not all of those configuration options are recognized by OSC yet.</p>
<p>With the above file, a <tt class="docutils literal">clouds.yaml</tt> file that utilized it might look like this:</p>
<pre class="literal-block">
clouds:
    rax:
        cloud: rackspace
        auth:
            project_id: 123456
            username: joe-stacker
            password: 0penstack
        region_name: DFW
</pre>
<p>The <tt class="docutils literal">cloud</tt> key selects the <tt class="docutils literal">rackspace</tt> definition from the <tt class="docutils literal"><span class="pre">clouds-public.yaml</span></tt>
file.  The <tt class="docutils literal">auth_url</tt> is automatically inherited from the <tt class="docutils literal">rackspace</tt> definition.
With those definitions, all that is required is the following:</p>
<pre class="literal-block">
openstack --os-cloud rax server list
</pre>
<p>or for those who still want to hang on to the old way, with an environment variable:</p>
<pre class="literal-block">
OS_CLOUD=rax openstack server list
</pre>
</div>
</div>
<div class="section" id="followup">
<h1>Followup</h1>
<p>Oh, just one more thing... I promised a followup to
<a class="reference external" href="/x/blog/2015/04/18/openstackclient-is-three-and-official/">this post</a>  once things
settled down.  I am settling into my new role with Intel doing pretty much
the same set of upstream things I was doing before.  As hoped, OpenStackClient
is a primary focus, along with some of the other client-side and app developer
things I have been peripherally involved in lately like the Python SDK and
the API Working Group.  And DevStack.  Always DevStack.</p>
<p>Actually, two more things... I was also elected to the OpenStack Technical Committee
in the recent election.</p>
<p>How about one more one more thing?  I shamelessly grabbed control of <a class="reference external" href="http://git.openstack.org/cgit/stackforge/golang-client/tree/">this dormant repo</a>
and intend to keep slowly plugging away at recreating a Keystone Session-style
client in my favorite strongly-typed language.  Come join!</p>
</div>
</div>
]]></content>
  </entry>
  <entry>
    <author>
      <name>dtroyer</name>
      <uri>http://hackstack.org/x/blog</uri>
    </author>
    <title type="html"><![CDATA[OpenStackClient Is Three and Official]]></title>
    <link rel="alternate" type="text/html" href="http://hackstack.org/x/blog/2015/04/18/openstackclient-is-three-and-official" />
    <id>http://hackstack.org/x/blog/2015/04/18/openstackclient-is-three-and-official</id>
    <updated>2015-04-18T15:03:18Z</updated>
    <published>2015-04-18T15:03:18Z</published>
    <category scheme="http://hackstack.org/x/blog" term="openstackclient" />
    <summary type="html"><![CDATA[OpenStackClient Is Three and Official]]></summary>
    <content type="html" xml:base="http://hackstack.org/x/blog/2015/04/18/openstackclient-is-three-and-official"><![CDATA[<div class="document">
<p>I was looking forward to writing a bit about OpenStackClient becoming the first
project added to OpenStack under the 'big yurt' <a class="footnote-reference" href="#id3" id="id1">[1]</a> governance model.  It was
even mostly written and set to publish right after the QA Code sprint article
when Nebula did what so many startups do, which is to abruptly cease to exist.
On April 1 no less.  So instead I'll rehash this as a note on OSC's third birthday,
based on the first repo commit.</p>
<div class="section" id="looking-backward">
<h1>Looking Backward</h1>
<p>I don't want to spend too much energy looking at where we have been, except to note
that a lot has happened since I shared a cab to SFO with Dolph Matthews and I floated the
idea of scrapping all of the OpenStack project CLIs and starting over.  He was
just receptive enough that I spent most of the flight home teasing out the basic
set of command actions and objects.  And he backed that up by later choosing to not
implement a CLI for the Identity v3 API but instead use OSC.</p>
<p>The rigorous <a class="reference external" href="http://docs.openstack.org/developer/python-openstackclient/commands.html">command structure</a> is what I consider the big win for OSC, having a
small set of common actions and a set of known objects that are manipulated with
those actions.  Define a common operation and then do that operation on <strong>EVERY</strong>
object the same way, even if that means a bunch of work under the hood because
the REST API doesn't work that way.</p>
<p>One now-forgotten tidbit here is that I designed the commands to look similar
to VMS's DCL command line set, in that the action preceeds the object.  One
complaint was that the objects needed to be pluralized on some actios, like <tt class="docutils literal">list</tt>,
because that's the proper English thing to do.  I ignored plurals completely,
although it does seem like we could have done it only with the list command.</p>
<p>It was at the Portland summit that I was persuaded to make the change when
someone who understands bash command completion better than I do (which is to say
'I never looked at it') mentioned that it would be <strong>much</strong> simpler if the
object came first.  OK, finally, a good technical reason to change so we did.
I think dhellmann said something like &quot;I expected that to be much harder&quot;
afterward.  I do change my mind, sometimes.</p>
</div>
<div class="section" id="looking-around-today">
<h1>Looking Around Today</h1>
<p>In the three years we have had just over 1000 commits from around 70 contributors.
I want to grow the team; we have a small band of regulars now with
a core review team of 4, having recently added Terry Howe, who has also spent
a significant amount of time working on the Python SDK.</p>
<p>We have a couple of interesting features brewing for the next significant release,
support for the <tt class="docutils literal"><span class="pre">os-client-config</span></tt> cloud configuration files and a client-side
caching that will significantly improve responsiveness in many instances. <a class="footnote-reference" href="#id4" id="id2">[2]</a></p>
<p>Another historical bit is that for most of its life, OSC was mostly a side project
for me.  I was able to eventually give it some real time along side DevStack and
the other things but it seems to be the kind of project that doesn't seem so
important until you really really need it now.</p>
<p>As I was talking to a lot of people over the last couple of weeks trying to find
my next professional home, it became clear to me how some people and organizations feel
about projects like OSC.  They're not sexy, not the sort of thing that 'sells'
customers on your cloud or your service or whatever.  There were a couple of companies
that totally did not view this as worth spending time on.  Fortunately for us all,
there are more companies that do think it is worth the time and I expect to be able
to give OSC and other client/app developer projects a significant part of my time
going forward.</p>
<p>When OSC was added as an official project, we also brought the <a class="reference external" href="http://git.openstack.org/cgit/openstack/os-client-config">os-client-config</a>
(from Stackforge) and <a class="reference external" href="http://git.openstack.org/cgit/openstack/cliff">cliff</a> (from Oslo) repos with it.  <tt class="docutils literal">Cliff</tt> was written
by Doug Hellmann specifically for OSC to manage the numerous command implementations
and give a solid basis for each of the actions.  I think it has worked out great
and been a great help in maintaining the consistency  in OSC so far.  It has also
been adopted by other projects, some outside of the OpenStack ecosystem.</p>
<p><tt class="docutils literal"><span class="pre">os-client-config</span></tt> (aka <tt class="docutils literal"><span class="pre">o-c-c</span></tt>) was originated by Monty Taylor to add client-side
cloud configuration along with his <a class="reference external" href="http://git.openstack.org/cgit/openstack-infra/shade">shade</a> library.
BTW, if you ever want to see what the challenges of using multiple clouds in the
same project, have a look at <tt class="docutils literal">shade</tt>.  In an ideal world it should not need to exist,
especially since it only talks to OpenStack clouds.</p>
<p>OSC will be using <tt class="docutils literal"><span class="pre">o-c-c</span></tt> to implement the same cloud configuration that will
make it <strong>simple</strong> to switch between cloud authentication configurations with a
single command line option.  And also to share public cloud configuration templates
without sharing authentication details for them.  I plan to follow up with details
on how to use this soon, watch this space.</p>
</div>
<div class="section" id="looking-ahead">
<h1>Looking Ahead</h1>
<p>Technically we still have a lot of work to do.  There are significant APIs
that are still not implemented (Network, Volume v2) and incomplete (Image v1 and
v2).  We need to speed up the load time, eliminate unnecessary dependencies,
and fix bugs.  Always fix bugs.</p>
<p>On a slightly longer scope, we will switch to use the OpenStack SDK when
it is ready, continue to better enable plugins to support upper layer services,
and most importantly, we MUST drive down the
number of dependencies required to install OSC and make it easy to use for
non-Python developers.  There needs to be a single file install that 'just works'.</p>
<p>I do still want to duplicate it all in Go.  My Go prototype is older than
OSC, actually...and is a single file install...</p>
<hr class="docutils" />
<table class="docutils footnote" frame="void" id="id3" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td>Yeah, I know the usual term is <cite>big tent</cite>.  Every time I hear that I
think of a <cite>big top</cite> and I really don't want to be thought of as 'one of the
clowns in the big top'... even if it might be accurate...</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id4" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id2">[2]</a></td><td><strong>Update:</strong> Caching didn't make it.</td></tr>
</tbody>
</table>
</div>
</div>
]]></content>
  </entry>
  <entry>
    <author>
      <name>dtroyer</name>
      <uri>http://hackstack.org/x/blog</uri>
    </author>
    <title type="html"><![CDATA[Plug In To OpenStackClient]]></title>
    <link rel="alternate" type="text/html" href="http://hackstack.org/x/blog/2015/03/08/plug-in-to-openstackclient" />
    <id>http://hackstack.org/x/blog/2015/03/08/plug-in-to-openstackclient</id>
    <updated>2015-03-08T03:08:00Z</updated>
    <published>2015-03-08T03:08:00Z</published>
    <category scheme="http://hackstack.org/x/blog" term="openstackclient" />
    <summary type="html"><![CDATA[Plug In To OpenStackClient]]></summary>
    <content type="html" xml:base="http://hackstack.org/x/blog/2015/03/08/plug-in-to-openstackclient"><![CDATA[<div class="document">
<p><a class="reference external" href="http://docs.openstack.org/developer/python-openstackclient/">OpenStackClient</a> has had plugin support for a while now and it is being used by real-world OpenStack project clients such as <a class="reference external" href="https://wiki.openstack.org/wiki/Congress">Congress</a>.  I've also been using it as an entry point (ha!) for some of my experimental command setups, and so can you.</p>
<div class="section" id="osc-debug">
<h1>osc-debug</h1>
<p>I've spent a lot of time debugging OSC lately in preparation for my favorite new feature yet-to-come, support for the new <tt class="docutils literal"><span class="pre">--os-cloud</span></tt> option that takes advantage of <tt class="docutils literal"><span class="pre">os-client-config</span></tt>'s cloud configuration file abilities.  Much of this debugging is necessarily around authentication and it became obvious to me that a built-in way to see what OSC was using for authentication might be handy and <tt class="docutils literal"><span class="pre">osc-debug</span></tt> was born.</p>
<p>As far as plugins go, <a class="reference external" href="https://github.com/dtroyer/osc-debug">osc-debug</a> is pretty ordinary.  It just adds three new commands (so far) that dump internal OSC state information.</p>
<div class="section" id="api-list">
<h2>api list</h2>
<p>A mash-up of service, region and endpoint listings.  <tt class="docutils literal">api list</tt> coughs up the basic information in the service catalog returned by the Identity authentication request.  It shows the available services by type, name and region.  With a little help from the <tt class="docutils literal"><span class="pre">--long</span></tt> option it adds the actual endpoint URL and a list of the supported versions at that endpoint.</p>
<p>The version support output needs a bit of explaining.  Nearly every OpenStack service catalog is configured to include a service API version in the URL.  This means that to use a different version requires 'knowledge'.  But here we know that these versions are nearly always in the form of <tt class="docutils literal">vNNN</tt> in the URI path.</p>
<p><tt class="docutils literal">api list</tt> starts at the base URI and looks for returned version information in a couple of the usual JSON formats.  If not found it loops adding the URI path components one at a time, stopping when it finds a recognized version response.</p>
<p>The returned service catalog entries can be filtered by service type <tt class="docutils literal"><span class="pre">--type</span></tt> or service name <tt class="docutils literal"><span class="pre">--name</span></tt>.</p>
<pre class="literal-block">
osc api list
    [--type &lt;service-type&gt;]
    [--name &lt;service-name&gt;]
    [--long]
</pre>
</div>
<div class="section" id="auth-show">
<h2>auth show</h2>
<p><tt class="docutils literal">auth show</tt> displays the authentication information that OSC will use to perform authentication.  This command stops just before authentication would otherwise occur so you can see exactly what has been collected from the command line options, environment variables and <tt class="docutils literal"><span class="pre">os-client-config</span></tt> file.</p>
<p>Note that this is one of the rare 'show' commands that does not take a positional argument to determine what to show.  This is due to there being ony one thing (authentication options) to choose from, but wanting to present the output in the traditional show command format.  This makes grabbing any of these values in a shell script trivial using the <tt class="docutils literal"><span class="pre">--format</span> shell</tt> option.</p>
<p>Also, <tt class="docutils literal">os_password</tt> is not displayed, because, duh.</p>
<pre class="literal-block">
osc auth show
</pre>
</div>
<div class="section" id="auth-type-list">
<h2>auth type list</h2>
<p><tt class="docutils literal">auth type list</tt> simply lists the authentication plugin types installed and their entry point targets.  Handy to see why things are not working as expected.</p>
<pre class="literal-block">
osc auth type list
</pre>
</div>
<div class="section" id="auth-type-show">
<h2>auth type show</h2>
<p><tt class="docutils literal">auth type show</tt> shows details of the specified auth plugin type.  This includes the options that the plugin type defines.  Note that the option names are the internal names, OSC will add <tt class="docutils literal"><span class="pre">--os-</span></tt> prefix to command lise options and <tt class="docutils literal">OS_</tt> prefix, plus forcing uppercase and replacing <tt class="docutils literal">-</tt> with <tt class="docutils literal">_</tt> for environment variables.</p>
<pre class="literal-block">
osc auth type show
    &lt;auth-type&gt;
</pre>
</div>
</div>
<div class="section" id="osc-quintette">
<h1>osc-quintette</h1>
<p><a class="reference external" href="https://github.com/dtroyer/osc-quintette">osc-quintette</a> is where the experimentation really gets going.  This oddly-named <a class="footnote-reference" href="#id4" id="id2">[1]</a> plugin has a couple of things, the most interesting one is how the server create command has been extended to accept --ram, --disk and --vcpu arguments to auto-select a matching flavor for the new server.</p>
<p>While the functionality is nice, the interesting bit is how the stock commands are extended.</p>
<div class="section" id="flavor-find">
<h2>flavor find</h2>
<p>This is the functional basis for the enhanced <tt class="docutils literal">server create</tt> command, directly searching for matching flavors that meet or exceed the specified values for RAM, disk and virtual CPUs.</p>
<p>What is the difference between a <tt class="docutils literal">find</tt> and <tt class="docutils literal">list</tt> command?  I don't know yet.  <tt class="docutils literal">List</tt> + filtering == <tt class="docutils literal">find</tt> maybe, but remember, this is experimental for a reason.</p>
<pre class="literal-block">
osc flavor find
    [--ram &lt;size-mb&gt;]
    [--disk &lt;size-gb&gt;]
    [--vcpus &lt;vcpus&gt;]
</pre>
</div>
<div class="section" id="server-create">
<h2>server create</h2>
<p>Extends the stock <tt class="docutils literal">server create</tt> by adding the options to select a flavor directly based on RAM, disk and/or virtual CPUs.</p>
<pre class="literal-block">
osc server create
    [--ram &lt;size-mb&gt;]
    [--disk &lt;size-gb&gt;]
    [--vcpus &lt;vcpus&gt;]
    ...
    &lt;server-name&gt;
</pre>
</div>
<div class="section" id="server-show">
<h2>server show</h2>
<p>Another command that extends the stock version by changing the output displayed, in this case swapping <tt class="docutils literal">project_id</tt> for <tt class="docutils literal">tenant_id</tt>.  This is something that needs to be done in OSC itself as part of our &quot;never show the user a 'tenant'&quot; campaign.</p>
</div>
<div class="section" id="show-flavor">
<h2>show flavor</h2>
<p>Yes!  I can restore my long-lost <tt class="docutils literal">&lt;action&gt; &lt;object&gt;</tt> command format just by putting the right things into <tt class="docutils literal">setup.cfg</tt>.  Unfortunately, the command class does not know (yet) which command form was given to call it so changing behaviour is not yet possible.  This requires a patch to <tt class="docutils literal">cliff</tt> that is in progress and should be released soon.</p>
</div>
</div>
<div class="section" id="what-else">
<h1>What Else?</h1>
<p>Imagination is all that is required to go from here.  Go forth and plugin.</p>
<hr class="docutils" />
<table class="docutils footnote" frame="void" id="id4" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id2">[1]</a></td><td>The word <cite>quintette</cite> comes directly from the name of <a class="reference external" href="http://raymondscott.com/">Raymond Scott's</a> small band in the 1930's, it is what I was listening to when I neede a name.  Much of his work from this era will sem eerily familiar to those who have seen Warner Brothers shorts scored by <a class="reference external" href="http://www.imdb.com/name/nm0006298/">Carl Stalling</a> in the 1940's and 1950's. I'm planning to propose <a class="reference external" href="https://archive.org/details/Powerhouse_657">Powerhouse</a> as the Official OpenStack Theme. Look it up...</td></tr>
</tbody>
</table>
</div>
</div>
]]></content>
  </entry>
  <entry>
    <author>
      <name>dtroyer</name>
      <uri>http://hackstack.org/x/blog</uri>
    </author>
    <title type="html"><![CDATA[How Dost Thy Cloud Know Me, Let Me Count The Ways]]></title>
    <link rel="alternate" type="text/html" href="http://hackstack.org/x/blog/2014/10/24/how-dost-thy-cloud-know-me-let-me-count-the-ways" />
    <id>http://hackstack.org/x/blog/2014/10/24/how-dost-thy-cloud-know-me-let-me-count-the-ways</id>
    <updated>2014-10-24T10:24:00Z</updated>
    <published>2014-10-24T10:24:00Z</published>
    <category scheme="http://hackstack.org/x/blog" term="openstackclient" />
    <summary type="html"><![CDATA[How Dost Thy Cloud Know Me, Let Me Count The Ways]]></summary>
    <content type="html" xml:base="http://hackstack.org/x/blog/2014/10/24/how-dost-thy-cloud-know-me-let-me-count-the-ways"><![CDATA[<div class="document">
<p>One of the coolest (IMHO) new features <a class="footnote-reference" href="#id2" id="id1">[1]</a> recently added to OpenStackClient is its leveraging of a new-ish feature of Keystone's client library, authentication plugins.  As that name implies, this allows for Keystone client to be able to use an extendable set of authentication backends for validating users.  At press time (keypress time for the pedantic) the freshly released <a class="reference external" href="https://pypi.python.org/pypi/python-keystoneclient">python-keystoneclient</a> 0.11.2 includes the traditional password method, a new variant on the token method and a recent addition supporting SAML2.</p>
<p>Happily, the <a class="reference external" href="http://git.openstack.org/cgit/openstack/python-openstackclient">master branch</a> of OpenStackClient has learned how to take advantage of these plugins, plus any additional ones written for Keystone client.  This creates a new problem because the authentication type can not always be inferred and needs to be supplied by the user.  And thus we arrive at the <em>Topic of the Day</em>.</p>
<div class="section" id="but-first-preview-time">
<h1>But First, Preview Time</h1>
<p>There is one additional yet-to-come feature that I can't resist mentioning now that it has been <a class="reference external" href="https://review.openstack.org/129795">proposed for review</a>. It leverages mordred's <a class="reference external" href="http://git.openstack.org/cgit/stackforge/os-client-config">os-client-config</a> module to read configuration information from a file by name.  In plain language, rather than set up a handful of environment variables or command-line options, all of the authentication and other configuration for OSC can be stashed in a YAML file and called by name:</p>
<pre class="literal-block">
openstack --os-cloud devstack-1 image list --long
</pre>
<p>This is also step one in simplifying dealing with multiple clouds:</p>
<pre class="literal-block">
for cloud in devstack-1 hpcloud-az2 rax-ord; do
    openstack --os-cloud image list --long
</pre>
<p>It is a small thing, but small things often make us happy.  It figures in to the following authentication discussion that I don't want to update again in a month.  So until <tt class="docutils literal"><span class="pre">os-cloud</span></tt> support merges, ignore references to YAML, <tt class="docutils literal">CloudConfig</tt>, etc. below.</p>
<!-- mordred -->
<!-- os-cloud https://review.openstack.org/129795 -->
</div>
<div class="section" id="sources-of-truth">
<h1>Sources of Truth</h1>
<p>OpenStackClient has three sources of configuration information (in decreasing priority order):</p>
<ul class="simple">
<li>command line options</li>
<li>environment</li>
<li><tt class="docutils literal">CloudConfig</tt> (<tt class="docutils literal"><span class="pre">~/.config/openstack/clouds.yaml</span></tt> file)</li>
</ul>
<p>Once all of the sources have been processed and a single configuration object assembled, the fun can begin.  If an authentication type is not provided, the authentication options are examined to determine if one of the default types can be used. If no match is found an error is reported and a period of stillness is declared.  Rather, the program exits.</p>
<p>Note that the authentication call to the Identity service has not yet
occurred.  It is deferred until the last possible moment in order to
reduce the number of unnecessary queries to the server, such as when further
processing detects an invalid command.</p>
</div>
<div class="section" id="keystone-authentication-plugins">
<h1>Keystone Authentication Plugins</h1>
<p>The Keystone client library implements the base set of plugins.  Additional
plugins may be available from the Keystone project or other sources.
See the <a class="reference external" href="http://docs.openstack.org/developer/python-keystoneclient/authentication-plugins.html">Keystone client documentation</a> for more information.</p>
<p>There are at least three authentication types that are always available:</p>
<ul>
<li><p class="first"><strong>Password</strong>: A username and password, plus optional project and/or domain,
are used to identify the user.  This is the most common type and the
default any time a username is supplied.  An authentication URL for the
Identity service is also required.  [Required: <tt class="docutils literal"><span class="pre">--os-auth-url</span></tt>, <tt class="docutils literal"><span class="pre">--os-project-name</span></tt>, <tt class="docutils literal"><span class="pre">--os-username</span></tt>; Optional: <tt class="docutils literal"><span class="pre">--os-password</span></tt>]</p>
</li>
<li><p class="first"><strong>Token</strong>: This is slightly different from the usual token authentication
(described below as token/endpoint) in that a token and an authentication
URL are supplied and the plugin retrieves a new (scoped?) token.
[Required: <tt class="docutils literal"><span class="pre">--os-auth-url</span></tt>, <tt class="docutils literal"><span class="pre">--os-token</span></tt>]</p>
</li>
<li><p class="first"><strong>Token/Endpoint</strong>: This is the original token authentication (known as 'token
flow' in the early CLI documentation in the OpenStack wiki).  It requires
a token and a direct endpoint that is used in the API call.  The difference
from the new Token type is this token is used as-is, no call is made
to the Identity service from the client.  This type is most often used to
bootstrap a Keystone server where the token is the <tt class="docutils literal">admin_token</tt> configured
in <tt class="docutils literal">keystone.conf</tt>.  It will also work with other services and a regular
scoped token such as one obtained from a <tt class="docutils literal">token issue</tt> command.  [Required: <tt class="docutils literal"><span class="pre">--os-url</span></tt>, <tt class="docutils literal"><span class="pre">--os-token</span></tt>]</p>
<p><em>[Note that the Token/Endpoint plugin is currently supplied by OSC itself and is not available for other clients using the Keystone client lib.  It shall move to its Proper Home in Good Time.]</em></p>
</li>
<li><p class="first"><strong>Others</strong>: There are SAML and other (Kerberos?) plugins under development
that are also supported.  To use them they must be selected by supplying
the <tt class="docutils literal"><span class="pre">--os-auth-type</span></tt> options.</p>
</li>
</ul>
</div>
<div class="section" id="how-it-s-made">
<h1>How It's Made</h1>
<p><em>[Who doesn't love</em> <a class="reference external" href="http://www.sciencechannel.com/tv-shows/how-its-made">that show</a>? <em>]</em></p>
<p>The authentication process flows from OSC's <tt class="docutils literal">OpenStackShell</tt> to the New-and-Improved <tt class="docutils literal">ClientManager</tt>.</p>
<ul class="simple">
<li>But first, on import <tt class="docutils literal">api.auth</tt>:<ul>
<li>obtains the list of installed Keystone authentication
plugins from the <tt class="docutils literal">keystoneclient.auth.plugin</tt> entry point.</li>
<li>builds a list of authentication options from the plugins.</li>
</ul>
</li>
<li><tt class="docutils literal">OpenStackShell</tt> parses the command line:<ul>
<li>If <tt class="docutils literal"><span class="pre">--os-cloud</span></tt> is present read the named configuration from <tt class="docutils literal"><span class="pre">~/.config/openstack/clouds.yaml</span></tt> and create a <tt class="docutils literal">CloudConfig</tt> object<ul>
<li><tt class="docutils literal">CloudConfig</tt> also handles picking up the matching environment variables for the options</li>
</ul>
</li>
<li>The remaining global command line options are merged into the new <tt class="docutils literal">CloudConfig</tt></li>
</ul>
</li>
<li>A new <tt class="docutils literal">ClientManager</tt> is created and provided with the <tt class="docutils literal">CloudConfig</tt>:<ul>
<li>If <tt class="docutils literal"><span class="pre">--os-auth-type</span></tt> is provided and is a valid and available plugin it is used.</li>
<li>If <tt class="docutils literal"><span class="pre">--os-auth-type</span></tt> is not provided select an authentication plugin based on the existing options.  This is a short-circuit evaluation, first match wins.<ul>
<li>If <tt class="docutils literal"><span class="pre">--os-endpoint</span></tt> and <tt class="docutils literal"><span class="pre">--os-token</span></tt> are both present <tt class="docutils literal">token_endpoint</tt> is selected</li>
<li>If <tt class="docutils literal"><span class="pre">--os-username</span></tt> is present <tt class="docutils literal">password</tt> is selected</li>
<li>If <tt class="docutils literal"><span class="pre">--os-token</span></tt> is present <tt class="docutils literal">token</tt> is selected</li>
<li>If no selection has been made by now exit with error</li>
</ul>
</li>
<li>Load the selected plugin class.</li>
</ul>
</li>
<li><tt class="docutils literal">ClientManager</tt> waits until an operation that requires authentication is attempted to make the initial request to the Identity service.<ul>
<li>if <tt class="docutils literal"><span class="pre">--os-auth-url</span></tt> is not present for any of the types except
Token/Endpoint, exit with an error.</li>
</ul>
</li>
</ul>
</div>
<div class="section" id="destinations-of-consequences">
<h1>Destinations of Consequences</h1>
<p>The changes that began with utilizing Keystone client's <tt class="docutils literal">Session</tt> are nearly complete and have added the <tt class="docutils literal">openstackclient.api.auth</tt> module and drastically restructured the <tt class="docutils literal">openstackclient.shell</tt> and <tt class="docutils literal">openstackclient.clientmanger</tt> modules.  One result is that the <tt class="docutils literal">ClientManager</tt> is now nearly self-contained with regard to its usability apart from the OSC shell.  At this time I can neither confirm nor deny that <tt class="docutils literal">ClientManager</tt> could be used as a single-point client API.  While it works (<a class="reference external" href="https://review.openstack.org/127873">one example</a>) it is not yet a stable API because it only unifies the session and auth components, passing the real work down to either the project libraries or OSC's internal API objects.  So don't go and do that.  Yet...</p>
<hr class="docutils" />
<table class="docutils footnote" frame="void" id="id2" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td>Currently only in master branch, to be included in the next release.</td></tr>
</tbody>
</table>
</div>
</div>
]]></content>
  </entry>
  <entry>
    <author>
      <name>dtroyer</name>
      <uri>http://hackstack.org/x/blog</uri>
    </author>
    <title type="html"><![CDATA[OpenStackClient Plugins]]></title>
    <link rel="alternate" type="text/html" href="http://hackstack.org/x/blog/2014/01/14/openstackclient-plugins" />
    <id>http://hackstack.org/x/blog/2014/01/14/openstackclient-plugins</id>
    <updated>2014-01-14T01:14:00Z</updated>
    <published>2014-01-14T01:14:00Z</published>
    <category scheme="http://hackstack.org/x/blog" term="openstackclient" />
    <summary type="html"><![CDATA[OpenStackClient Plugins]]></summary>
    <content type="html" xml:base="http://hackstack.org/x/blog/2014/01/14/openstackclient-plugins"><![CDATA[<div class="document">
<p>OpenStackClient (OSC) has been in my project queue for almost two years now.  It was Feb 2012 that I stayed up all night mucking about with something called DrStack with the goal of combining the then four OpenStack CLI binaries into a single command set.</p>
<p>OSC is the second major realization of that goal having a greatly improved internal command architecture courtesy of dhellmann's Cliff framework.  It also somehow got an informal blessing without becoming an official project, a status that it still carries.  We have a roadmap of where to go with that but that is a topic for another day.</p>
<p>Today we talk plugins!</p>
<p>Yes, I know, that is an overused term in OpenStack, where everything seems to be a plugin or an extension or optional in some way.  But I don't have anything better at the moment so plugin it is.</p>
<div class="section" id="openstackclient-plugins">
<h1>OpenStackClient Plugins</h1>
<p>OSC development has been a series of quiet periods interspersed with bouts of furious activity.  Fast-forward to last month (Dec 2013) and the introduction of a viable command plugin system for OSC first released in version 0.3.0.  The OSC side is documented in the <a class="reference external" href="http://docs.openstack.org/developer/python-openstackclient/plugins.html">OpenStackClient Developer Documentation</a>.</p>
<div class="section" id="goals">
<h2>Goals</h2>
<p>The previous OSC plugin mechanism was too naive and did not allow for adding client objects to the ClientManager. We needed to:</p>
<ul class="simple">
<li>define an initialization to add global options for API versions and whatnot (parser phase)</li>
<li>define an initialization function(s) to select an API version add an appropriate client to the ClientManager (client phase)</li>
</ul>
</div>
<div class="section" id="implementation">
<h2>Implementation</h2>
<p>As an exercise to validate the completeness of the plugin mechanism, the Compute, Image and Volume API commands were converted to initialize via the plugin mechanism.  The only difference from an external plugin is that they are included in the OSC repo.</p>
<p>The new plugin mechanism builds on the use of <a class="reference external" href="https://pypi.python.org/pypi/cliff‎">Cliff</a> to dynamically load the command classes and modifies the existing OSC <tt class="docutils literal">ClientManager</tt> to define the client objects to be instantiated at run-time.  This allows additional clients to insert themselves into the <tt class="docutils literal">ClientManager</tt>.</p>
<p>OSC looks for plugins that register their client class under <tt class="docutils literal">openstack.cli.extension</tt>.  The key is the API name and must be unique for all plugins, the value is the module name that contains the public initialization functions.</p>
<p>The initialization module is typically names <tt class="docutils literal"><span class="pre">&lt;project-name&gt;.client</span></tt>, although there is no technical requirement to follow this convention.  It was adopted as that was already the name of the modules used by the built-in API classes.</p>
<p>The initialization module must implement a set of constants that are used to identify the plugin and two functions that instantiate the actual API client class and define any global options required.</p>
</div>
</div>
<div class="section" id="python-oscplugin">
<h1>python-oscplugin</h1>
<p>Since most actual OSC plugins are not going to be part of the repo, we created a sample plugin in a stand-alone project to demonstrate the bits required.  <a class="reference external" href="https://github.com/dtroyer/python-oscplugin">python-oscplugin</a> began life as a <a class="reference external" href="https://github.com/openstack-dev/cookiecutter">cookiecutter</a> project (worth using to bootstrap a project in the OpenStack-way) and expanded to become a simple demonstration of an OSC command plugin.</p>
<p>So let's walk through the sample plugin to see how this works...</p>
<div class="section" id="plugin-initialization">
<h2>Plugin Initialization</h2>
<p>It all starts with the initialization module, here named <tt class="docutils literal">oscplugin.plugin</tt>, defining the rest of the identifiers used to locate plugin bits.  Naming this module is flexible, it just needs to be specified in the <tt class="docutils literal">openstack.cli.extension</tt> entry point group.</p>
<ul class="simple">
<li><tt class="docutils literal">API_NAME</tt> - A short string describing the API or command set name.  It is used in the entry point group name and is the key name in the <tt class="docutils literal">openstack.cli.extension</tt> group to identify the plugin.  Must be a valid Python identifier string.</li>
<li><tt class="docutils literal">API_VERSION_OPTION</tt> - An optional name of the API version attribute used in the global command-line options to specify an API version.  It will be used in <tt class="docutils literal">build_option_parser()</tt> if setting an API version is required.  Must be a valid Python identifier string.</li>
<li><tt class="docutils literal">API_VERSIONS</tt> - A dict mapping version strings to client class names.</li>
</ul>
<p>Two functions are required that perform the initialization work for the plugin.</p>
<ul class="simple">
<li><tt class="docutils literal">build_option_parser()</tt> - The top-level parser object is passed in and available to add plugin-specific options, usually an API version selector.</li>
<li><tt class="docutils literal">make_client()</tt> - Instantiate the actual client object taking in to consideration any version that may be specified.  The mapping of version to client class is handled here.  Also, any authentication or service selection the specific client requires is passed in here.</li>
</ul>
</div>
<div class="section" id="client-api">
<h2>Client API</h2>
<p><tt class="docutils literal"><span class="pre">python-oscplugin</span></tt> contains its own equivalent to a client API object.  In this case it is just a placeholder as the <tt class="docutils literal">plugin</tt> commands do not have an external client library.  For most API clients this is the actual client class, such as <tt class="docutils literal">glanceclient.v2.client.Client</tt> for the Image v2 API.</p>
<p>There are cases where the API client class is insufficient for some reason and adaptations are required.  The Image v1 client is a good example.  The ImageManager class in <tt class="docutils literal">glanceclient</tt> does not have a <tt class="docutils literal">find()</tt> method so we implemented one in <tt class="docutils literal">openstackclient.image.client.Client_v1</tt> that uses <tt class="docutils literal">openstackclient.image.client.ImageManager_v1</tt> with added <tt class="docutils literal">find()</tt> and <tt class="docutils literal">findall()</tt> methods.</p>
</div>
<div class="section" id="commands">
<h2>Commands</h2>
<p>The commands implemented in <tt class="docutils literal"><span class="pre">python-oscplugin</span></tt> are in <tt class="docutils literal">oscplugin.v1.plugin</tt> and follow the basic pattern used by the other OSC command classes.  Again they are mostly placeholders here.</p>
</div>
<div class="section" id="tests">
<h2>Tests</h2>
<p>The structure of the tests also follows that of the existing OSC API commands.  They use <tt class="docutils literal">mock</tt> and fakes to perform unit tests on the command classes.</p>
</div>
<div class="section" id="project-stuff">
<h2>Project Stuff</h2>
<p>Ad <tt class="docutils literal"><span class="pre">python-oscplugin</span></tt> was created using <a class="reference external" href="https://github.com/openstack-dev/cookiecutter">cookiecutter</a> it includes the usual OpenStack features such as <tt class="docutils literal">pbr</tt> and friends.  The specific bits pertaining to an OSC plugin:</p>
<ul>
<li><p class="first"><tt class="docutils literal">setup.cfg</tt> - All of the plugin-specific content is in the <tt class="docutils literal">[entry_points]</tt> section:</p>
<pre class="literal-block">
[entry_points]
openstack.cli.extension =
    oscplugin = oscplugin.plugin

openstack.oscplugin.v1 =
    plugin_list = oscplugin.v1.plugin:ListPlugin
    plugin_show = oscplugin.v1.plugin:ShowPlugin
</pre>
</li>
</ul>
<p>Note that OSC defines the group name as <tt class="docutils literal"><span class="pre">openstack.&lt;api-name&gt;.v&lt;version&gt;</span></tt>
so the version should not contain the leading 'v' character.</p>
<ul class="simple">
<li><tt class="docutils literal">requirements.txt</tt> - We've added  <tt class="docutils literal">openstackclient</tt> as <tt class="docutils literal"><span class="pre">python-oscplugin</span></tt> is useless without it.  <tt class="docutils literal">keystoneclient</tt> is here too, while <tt class="docutils literal"><span class="pre">python-oscplugin</span></tt> does not require it, most OpenStack API clients will.  <tt class="docutils literal">cliff</tt> is also needed here.</li>
<li><tt class="docutils literal"><span class="pre">test-requirements.txt</span></tt> - <tt class="docutils literal">mock</tt> is required for testing.</li>
</ul>
</div>
<div class="section" id="a-note-about-versions">
<h2>A Note About Versions</h2>
<p>Internally OSC uses the convention <tt class="docutils literal">vXXX</tt> for version identifiers, where <tt class="docutils literal">XXX</tt> is a valid Python identifier in its own right (i.e., uses '_' rather than '.' internally).  OSC adds the leading 'v' so versions expressed in constant declarations should not include it.</p>
</div>
</div>
<div class="section" id="eot">
<h1>EOT</h1>
<p>The plugin structure should allow any base install of OSC to be extended simply by installing the desired client package.  Af of right now there are no other clients that implement the plugin, but that will be changing soon.  Film at eleven...</p>
</div>
</div>
]]></content>
  </entry>
</feed>
