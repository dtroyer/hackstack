<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>HackStack Posts</title>
    <link>http://hackstack.org/x/blog</link>
    <description>OpenStack and other hackish things</description>
    <pubDate>Thu, 25 Apr 2013 04:10:45 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>A CentOS 6 Image for OpenStack</title>
      <link>http://hackstack.org/x/blog/2013/04/25/a-centos-6-image-for-openstack</link>
      <pubDate>Thu, 25 Apr 2013 04:25:00 CDT</pubDate>
      <category><![CDATA[openstack]]></category>
      <category><![CDATA[rhel]]></category>
      <category><![CDATA[centos]]></category>
      <guid isPermaLink="false">xNWj4uudQrtb_Ova4tv9U5ysr-U=</guid>
      <description>A CentOS 6 Image for OpenStack</description>
      <content:encoded><![CDATA[<div class="document">
<p>This is the next installment in the never-ending series of OpenStack image builds.  Today's
target: CentOS</p>
<div class="section" id="image-characteristics">
<h1>Image Characteristics</h1>
<p>The usual suspects are present:</p>
<ul class="simple">
<li>minimal package install</li>
<li>serial console support</li>
<li>timezone is <tt class="docutils literal">Etc/UTC</tt></li>
<li>hostname set to instance name</li>
<li>a single partition with root filesystem, no swap</li>
<li>grow root filesystem to device size</li>
<li>enable EPEL (install epel-release)</li>
<li>enable could-init repo to get 0.7.1</li>
</ul>
<p>A few things are still lacking:</p>
<ul class="simple">
<li>selinux is in permissive mode, make enforcing</li>
<li>strengthen default firewall</li>
</ul>
</div>
<div class="section" id="build">
<h1>Build</h1>
<p>Tools like <tt class="docutils literal">Oz</tt> are a good idea in theory but in practice seem to be quite picky about the environment
they will correctly run on.  I'm looking at you <tt class="docutils literal">libguestfs</tt>.  Other tools like the venerable <tt class="docutils literal"><span class="pre">appliance-creator</span></tt> get hung up
on needing the same version of things in the host as in the chroot.</p>
<p>Good ole <tt class="docutils literal"><span class="pre">virt-install</span></tt> happily runs on damn near everything.  This build has been tested
on CentOS 6.4 and Ubuntu 12.10.  <cite>TODO(dtroyer): don't run this all as root</cite></p>
<p>Let's get started.</p>
<ul>
<li><p class="first">Install <cite>virt-install</cite> and all its prerequisites</p>
<ul>
<li><p class="first">on Ubuntu:</p>
<pre class="literal-block">
sudo apt-get install virtinst
</pre>
</li>
<li><p class="first">on CentOS:</p>
<pre class="literal-block">
sudo yum install libvirt python-virtinst qemu-kvm
sudo /etc/init.d/libvirtd start
</pre>
</li>
</ul>
</li>
<li><p class="first">Get a <a class="reference external" href="https://raw.github.com/dtroyer/image-recipes/master/centos-6-x86_64.ks">CentOS 6 kickstart</a> file with minimal stuff and the extras that we need.  Included in <tt class="docutils literal">%post</tt> is a bit to resize the root filesystem to the size of the actual device provided to the VM.</p>
</li>
</ul>
<ul>
<li><p class="first">Create base image with <tt class="docutils literal"><span class="pre">virt-install</span></tt>:</p>
<pre class="literal-block">
sudo virt-install \
    --name centos-6-x86_64 \
    --ram 1024 \
    --cpu host \
    --vcpus 1 \
    --nographics \
    --os-type=linux \
    --os-variant=rhel6 \
    --location=http://mirrors.kernel.org/centos/6/os/x86_64 \
    --initrd-inject=centos-6-x86_64.ks \
    --extra-args=&quot;ks=file:/centos-6-x86_64.ks text console=tty0 utf8 console=ttyS0,115200&quot; \
    --disk path=/var/lib/libvirt/images/centos-6-x86_64.img,size=2,bus=virtio \
    --force \
    --noreboot
</pre>
</li>
<li><p class="first">Point to the bridge with external connectivity if it is not <cite>eth0</cite>:</p>
<pre class="literal-block">
--network=bridge=br0
</pre>
</li>
<li><p class="first">If <tt class="docutils literal">libguestfs</tt> is functional on your build platform:</p>
<pre class="literal-block">
sudo yum install -y libguestfs-tools
sudo virt-sysprep --no-selinux-relabel -a /var/lib/libvirt/images/centos-6-x86_64.img
sudo virt-sparsify --convert qcow2 --compress /var/lib/libvirt/images/centos-6-x86_64.img centos-6-x86_64.qcow2
</pre>
</li>
<li><p class="first">Kick it into the cloud image repository:</p>
<pre class="literal-block">
glance image-create --name &quot;CentOS 6 x86_64&quot; --disk-format qcow2 --container-format bare --is-public false --file centos-6-x86_64.qcow2
</pre>
</li>
</ul>
<!-- save for selinux enforcing
# SELinux: relabelling all filesystem
echo "guestfis selinux relabel"
guestfish - -selinux -i $IMGNAME.$EXT <<EOF
sh load_policy
sh 'restorecon -Rv /'
EOF -->
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>OpenStack Developer Summit</title>
      <link>http://hackstack.org/x/blog/2013/04/19/openstack-developer-summit</link>
      <pubDate>Fri, 19 Apr 2013 19:04:00 CDT</pubDate>
      <category><![CDATA[openstack]]></category>
      <guid isPermaLink="false">RltD8bcInfRJzTxxe85BL1Ep_38=</guid>
      <description>OpenStack Developer Summit</description>
      <content:encoded><![CDATA[<div class="document">
<p>The OpenStack Developer Summit has just concluded in Portland, OR, and by many measures was an enormous success.
Enormous because there were a reported &gt;2800 people in attendance.  I never heard a breakdown of how many
of those were developers but I'd guess that that number was up too.  The rooms were generally full
but usually only a handful of people actively participated in most sessions.
And speaking of full rooms, most of the 'project-formerly-known-as-Quantum' sessions were SRO.
I skipped those due to other interests but the word is none of the network vendors did.
Most of my time was spent looking for things that affected my three primary projects:
DevStack, Grenade and OpenStackClient.</p>
<p><strong>DevStack</strong></p>
<p>There was no dedicated session to DevStack
but it did not escape mention.  Most of the talk I heard about it was in conjunction with its
use in the CI gating tests and even then there wasn't much.
The hallway talk seemed to always revolve around adding functionality that really doesn't belong in DevStack.
It was nice to be able to explain in person that
the requested feature wasn't core to DevStack's purpose and how they can easily hook in to
<tt class="docutils literal">stack.sh</tt> to add the feature.</p>
<p><strong>Grenade</strong></p>
<p>Grenade had a session on Tuesday led my moi that concentrated on the project upgrade strategy and
gate issues.  Fortunately the discussion
around run time was short, Grenade's &lt;5 minutes is dwarfed by Tempest so nobody really cares.</p>
<p>The upgrade strategy noted the change from rewriting new config files based on the samples
included in the project repo to only making upgrade-necessary changes to the existing config files.
The current Grenade implementation does this for all but Keystone and Swift.  The consensus
in the room was that both of those should be fixable with some knowledgable input.</p>
<p>There are some improvements that can be made to <tt class="docutils literal"><span class="pre">devstack-vm-gate*.sh</span></tt> to simplify the configuration
that is actually run in the gate test.  The goal here is to make the gate closer to the
configuration that is typically used by devs.</p>
<p><strong>OpenStackClient</strong></p>
<p>The first (and last) two sessions on OpenStackClient at previous summits were dominated by
talk about what it should be and how people wanted to use it.  The project is at a stage where
it needs to get some things completed so we can make a 0.1 pre-alpha release.  We grabbed
an Unconference slot on Wednesday to get the primary developers together and decide on a few
things, like the tasks to be completed prior to the 0.1 release.  There were others present who
I'm afraid we left wondering where the presentation was.</p>
<p>Command parity with the project clients, save for that name-that-used-to-start-with-a-q project's client, is the major
task for release.  Compute is not complete (<em>dtroyer</em>), Object (Swift) is non-existant, and
the remainder are close but need an audit to see what may be missing since they were first
implemented.</p>
<p>The major news in the command front is the change of my beloved &quot;verb object&quot; form to
&quot;object verb&quot;. <a class="footnote-reference" href="#id2" id="id1">[1]</a> There is finally a good reason to change: to facilitate bash tab-completion.
I'm taking <em>dhellmann's</em> word on this as tab-completion  has not been done yet.  And I'll be dipped
if I can't come up with anything to counter it. So to ease my pain, Doug volunteered to
make the change.</p>
<p><strong>Image Interchange</strong></p>
<p>This session kept getting sidetracked by people wanting to make the common image format
include the contents of the system in addition to the format of the disk image file.
<em>smoser</em> did his best to remind everyone that Glance's concern with image formats stopped
at the file blocks that contain filesystem bits.  The contents of those blocks is off-limits.</p>
<p>It should be remembered that in previous summits the opening of user-submitted disk images
to inject files and user data was specifically removed from Nova due to the potential
security issues involved.  Also there is the matter of knowing just what to do to a random
filesystem.  This led to the adoption of cloud drive as an alternative to AWS-style metadata
service.</p>
<p>The intention of the session was to work out details of exchanging images between clouds, including
the disk format used.  Apparently there are OpenStack implementations that do not support
the qcow2 format because otherwise that is what should be used as it has both compression
and sparse capabilities.  Of course raw would also work but let's be realistic here.</p>
<p><strong>Dependency Management</strong></p>
<p>This is one session that may have some positive effects on DevStack as a side effect of
documenting OS-level package dependencies for each project.  The session primarily concerned
opestack/requirements as a gate for Python dependencies and the use of an OpenStack-specific
PyPi mirror.</p>
<p>The interesting bit to me is the need to handle non-pip-installable dependencies.  DevStack
already maintains some of this information for distros and releases.  Moving this into the
project repos would allow it to be used by other processes and get DevStack completely out
of tracking project dependencies.  It remains TBD as to who actually does the install.</p>
<p><strong>Project Renaming</strong></p>
<p>A recent issue with one of the OpenStack projects that once had a code name with a 'Q' and
two 'u's is no longer calling itself that.  I'm not touching the reasons why, that is for others
to explain.  What I am mostly interested in is the amount of work required to change a projects name,
even when it is done at phase boundaries such as moving into and out of incubation.</p>
<p>This means that choosing a project name has more pressure to get it right the first time than before.
I am assuming here that the common sentiment expressed in the session to not stop using project names
is the path chosen even if the public use of project names is ramped down.</p>
<p>Two of the three projects that I am deeply involved in (read as 'would do more than a little of
the name changing work') have names that are invented terms so the chance that there might be confusion
in the industry is low.  And a different set of two of those projects are primarily used internally
and should get little public attention.</p>
<p><strong>Wrapup</strong></p>
<p>That does it for the highlights of my week in Portland.  I'll leave it to others to summarize
the rest, save for pimping Terrence and Bertram's <a class="reference external" href="http://dopenstack.com">latest video</a>
that provided an energetic open to the keynotes.  Stay tuned for some deeper thoughts on a few of the topics mentioned here.</p>
<table class="docutils footnote" frame="void" id="id2" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td>Sorry VMS DCL fans, I tried.</td></tr>
</tbody>
</table>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>A Fedora 18 Image for OpenStack</title>
      <link>http://hackstack.org/x/blog/2013/01/25/a-fedora-18-image-for-openstack</link>
      <pubDate>Fri, 25 Jan 2013 01:25:00 CST</pubDate>
      <category><![CDATA[openstack]]></category>
      <category><![CDATA[fedora]]></category>
      <guid isPermaLink="false">1jKqR7FTq7lyLCIBc9iAX1D25Bg=</guid>
      <description>A Fedora 18 Image for OpenStack</description>
      <content:encoded><![CDATA[<div class="document">
<p>Building images to boot in a cloud can be a lot of fun, especially since now two clouds are built alike.
Now fortunately the differences are mostly minor, but some of the minor differences can be fatal. Ugh.</p>
<div class="section" id="good-news">
<h1>Good News</h1>
<p>The recent release of Fedora 18 brought with it a pleasant surprise, the build of some images suitable for loading into your favorite cloud, ala Ubuntu's UEC images.
The <a class="reference external" href="http://lists.fedoraproject.org/pipermail/cloud/2013-January/002192.html">mailing list notice</a> gives the background and a reply in that thread mentions some desirable changes.  So in order to make those changes I decided to roll my own using the FCI <a class="reference external" href="/x/files/fedora-18-x86_64-cloud.ks">kickstart</a> as a base.</p>
<p>The <a class="reference external" href="/x/files/fedora-18-x86_64-cloud-dt1.ks">new kickstart</a> file is pretty straightforward and mostly self-explanatory.  Here is what I changed:</p>
<pre class="literal-block">
* Set the timezone to ``Etc/UTC``
* Configure for serial console
* Create a default ``fedora`` user (instead of ``ec2-user``)
* Leave behind a build timestamp in /etc/.build
* Remove sendmail
* Add ??
</pre>
<p>And here is what it took to get <tt class="docutils literal"><span class="pre">appliance-creator</span></tt> running on a fresh Fedora 17 VM:</p>
<pre class="literal-block">
sudo yum install -y appliance-tools.noarch
wget -N http://git.fedorahosted.org/cgit/cloud-kickstarts.git/plain/generic/fedora-18-x86_64-cloud.ks
# make kickstart changes
sudo appliance-creator --config fedora-18-x86_64-cloud-dt1.ks --name fedora18-x86_64-cloud-dt1 --format raw
</pre>
<p>The conversion to qcow2 is done separately as <tt class="docutils literal"><span class="pre">appliance-creator</span></tt> doesn't compress qcow2 images:</p>
<pre class="literal-block">
qemu-img convert -c -f raw -O qcow2 fedora-18-x86_64-cloud-dt1.raw fedora-18-x86_64-cloud-dt1.qcow2
</pre>
<p>Kick it into the cloud image repository:</p>
<pre class="literal-block">
glance image-create --name &quot;Fedora 18 x86_64 cloudimg&quot; --disk-format qcow2 --container-format bare --is-public false --file fedora-18-x86_64-cloud-dt1/fedora-18-x86_64-cloud-dt1-sda.qcow2
</pre>
<div class="section" id="kickstart-details">
<h2>Kickstart Details</h2>
<p>All of the excerpts below are shown in diff(1) format to illustrate the changes made to the original kickstart file.</p>
<div class="section" id="timezone">
<h3>Timezone</h3>
<p>Set the timezone to <tt class="docutils literal">Etc/UTC</tt>:</p>
<pre class="literal-block">
-timezone --utc America/New_York
+timezone --utc Etc/UTC
</pre>
</div>
<div class="section" id="serial-console">
<h3>Serial Console</h3>
<p>There are a couple of things that need to be updated to properly get a serial console in Linux.
Append to the bootloader:</p>
<pre class="literal-block">
-bootloader --timeout=0 --location=mbr --driveorder=sda
+bootloader --timeout=0 --location=mbr --driveorder=sda --append=&quot;console=tty console=ttyS0&quot;
</pre>
<p>Configuring Grub takes a little more effort. The original kickstart only worked in the chroot-ed %post but <tt class="docutils literal"><span class="pre">grub2-mkconfig</span></tt> failed because /dev was not complete.
By adding a <tt class="docutils literal">%post <span class="pre">--nochroot</span></tt> section /dev can be bind-mounted into the chroot so <tt class="docutils literal"><span class="pre">grub2-mkconfig</span></tt> is happy.
I probably went a little overboard in setting up the proper serial console arguments to the kernel command line but the following worked:</p>
<pre class="literal-block">
+%post --nochroot
+echo &quot;Configure GRUB2 for serial console&quot;
+echo GRUB_TIMEOUT=0 &gt; $INSTALL_ROOT/etc/default/grub
+echo GRUB_TERMINAL=console &gt;&gt;$INSTALL_ROOT/etc/default/grub
+echo GRUB_CMDLINE_LINUX=\&quot;console=ttyS0 console=tty\&quot; &gt;&gt;$INSTALL_ROOT/etc/default/grub
+echo GRUB_CMDLINE_LINUX_DEFAULT=\&quot;console=ttyS0\&quot; &gt;&gt;$INSTALL_ROOT/etc/default/grub
+mount -o bind /dev $INSTALL_ROOT/dev
+/usr/sbin/chroot $INSTALL_ROOT /sbin/grub2-mkconfig -o /boot/grub2/grub.cfg
+umount $INSTALL_ROOT/dev
+%end
</pre>
<p>The following lines were also removed from the original <tt class="docutils literal">%post</tt> Grub section:</p>
<pre class="literal-block">
-echo GRUB_TIMEOUT=0 &gt; /etc/default/grub
-sed -i 's/^set timeout=5/set timeout=0/' /boot/grub2/grub.cfg
</pre>
</div>
<div class="section" id="default-account">
<h3>Default Account</h3>
<p><tt class="docutils literal"><span class="pre">cloud-init</span></tt> creates an <tt class="docutils literal"><span class="pre">ec2-user</span></tt> account by default.  The account is useful but this isn't EC2 so the account is renamed to <tt class="docutils literal">fedora</tt>:</p>
<pre class="literal-block">
-# Uncomment this if you want to use cloud init but suppress the creation
-# of an &quot;ec2-user&quot; account. This will, in the absence of further config,
-# cause the ssh key from a metadata source to be put in the root account.
-#cat &lt;&lt;EOF &gt; /etc/cloud/cloud.cfg.d/50_suppress_ec2-user_use_root.cfg
-#users: []
-#disable_root: 0
-#EOF
+# Rename the 'ec2-user' account to 'fedora'
+sed -i '
+  s/name: ec2-user/name: fedora/g
+  s/gecos: EC2/gecos: Fedora/g
+' /etc/cloud/cloud.cfg
</pre>
</div>
<div class="section" id="build-stamp">
<h3>Build Stamp</h3>
<p>Leave a file containing the build version and timestamp just in case it might be useful from inside the VM:</p>
<pre class="literal-block">
+# Leave behind a build stamp
+echo &quot;build=nebula1 $(date +%F.%T)&quot; &gt;/etc/.build
</pre>
</div>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Securing OpenStack Client Connections Part 2</title>
      <link>http://hackstack.org/x/blog/2012/12/21/securing-openstack-client-connections-part-2</link>
      <pubDate>Fri, 21 Dec 2012 12:12:12 CST</pubDate>
      <category><![CDATA[openstack]]></category>
      <category><![CDATA[devstack]]></category>
      <guid isPermaLink="false">IZEREiaAiOZB3E2UqmEI6sBnIY4=</guid>
      <description>Securing OpenStack Client Connections Part 2</description>
      <content:encoded><![CDATA[<div class="document">
<p>In the first part of this series we covered creating a pair of certificate authorities and a signed certificate with the same attributes commonly found in commercial certificates.  This part covers the OpenStack Python clients and proper certificate verification.</p>
<p>The OpenStack client repositories (or packages) include both the Python API bindings and the reference command line interface (CLI) implementation to communicate with the OpenStack APIs.   Client support for modern encrypted connections, i.e SSLv3 and/or TLSv1, has been spotty at best.</p>
<p>Most of the clients are capable of using SSL for encryption but often the certificate verification part of the protocol did not work properly for tier-2 or privately signed certificates, prompting the addition of the <tt class="docutils literal"><span class="pre">--insecure</span></tt> option to some of the clients to sidestep the problem altogether.  In addition, most of the clients had no mechanism to specify an alternate CA bundle file to enable certificate verification for certificates not signed by the commercial CAs.</p>
<p>Python has historically had incomplete X.509 certificate support in its standard library.  For example, <tt class="docutils literal">ssl</tt> and <tt class="docutils literal">httplib</tt> do not verify the hostname as part of certificate verification. Four of the clients (keystone, nova, cinder, quantum) use <tt class="docutils literal">httplib2</tt> which had no hostname verification before version 0.7.0 and what it currently has is also incomplete. The other two clients (glance and swift) use <tt class="docutils literal">httplib</tt> directly and either have no hostname verification (swift) or implement it locally (glance).</p>
<div class="section" id="issue-summary">
<h1>Issue Summary</h1>
<ul class="simple">
<li>Python's <tt class="docutils literal">ssl</tt> module does no certificate hostname verification in 2.7.x; it has been added in 3.2 but will not be backported. <a class="footnote-reference" href="#id3" id="id1">[1]</a></li>
<li><tt class="docutils literal">ssl</tt> is pinned to using protocol version <tt class="docutils literal">SSLv23</tt> and must be directly patched to override it.</li>
<li><tt class="docutils literal">httplib</tt> uses <tt class="docutils literal">ssl</tt> and adds no hostname verification.  In addition it only uses the default <tt class="docutils literal">SSLV23</tt> protocol version set by <tt class="docutils literal">ssl</tt>.  We don't want this as SSLv2 is deprecated and insecure.  Patching that value directly into the <tt class="docutils literal">ssl</tt> module works but is suboptimal.</li>
<li><tt class="docutils literal">httplib2</tt> implements a basic hostname verification but it has some problems such as only checking <tt class="docutils literal">commonName</tt> if the certificate's <tt class="docutils literal">subjectAltNames</tt> is not present and handling wildcards differently than specified in RFC-2818.</li>
<li><tt class="docutils literal">httplib2</tt> uses an internal ca bundle (<tt class="docutils literal">cacert.txt</tt>) if the <tt class="docutils literal">ca_certs</tt> argument is not given to <tt class="docutils literal">HTTPSConnectionWithTimeout.__init__()</tt>.</li>
<li>In other news, <tt class="docutils literal">httplib2</tt> only supports 3xx redirects for GET method.</li>
</ul>
<div class="section" id="additional-notes">
<h2>Additional Notes</h2>
<p>glanceclient has patched the <tt class="docutils literal">ssl</tt> module out of <tt class="docutils literal">httplib</tt> in favor of <tt class="docutils literal">pyOpenSSL</tt>.  Stuart McLaren added <tt class="docutils literal">http.VerifiedHTTPSConnection.host_matches_cert()</tt> to validate <tt class="docutils literal">commonName</tt> and <tt class="docutils literal">subjectAltName</tt> for <tt class="docutils literal">httplib</tt> connections but it doesn't handle wildcards.</p>
</div>
</div>
<div class="section" id="why-requests-2">
<h1>Why requests? <a class="footnote-reference" href="#id4" id="id2">[2]</a></h1>
<p>The <tt class="docutils literal">requests</tt> module backported <tt class="docutils literal">match_hostname()</tt> from Python 3.2.  Like the rest of the modules here it does not handle the <tt class="docutils literal">iPAddress</tt> attribute in <tt class="docutils literal">subjectAltName</tt>. This is mostly relevant in development and testing use cases like with DevStack.  The 3.2 <tt class="docutils literal">match_hostname()</tt> implementation however does allow IP addresses as a <tt class="docutils literal">dNSName</tt>.</p>
<p><tt class="docutils literal">requests</tt> also brings a number of other features to the table that may or may not have been implemented individually in the existing clients such as JSON encoding/decoding and 3xx redirection support for POST, PUT, PATCH DELETE, and HEAD.  Plus it is stable (notwithstanding the recent 1.0 release) and the developer is known in the OS community.</p>
</div>
<div class="section" id="the-cli-solution">
<h1>The CLI Solution</h1>
<p>There has recently been a round of patches to the CLIs to get them all up to the same level of support for TLSv1 to be used for authentication at a minimum.  Glance and Swift continue to use <tt class="docutils literal">httplib</tt> directly for their data transfer connections (really, all connections to their respective services) and these already support SSLv3.</p>
<table border="1" class="docutils">
<colgroup>
<col width="11%" />
<col width="16%" />
<col width="44%" />
<col width="16%" />
<col width="13%" />
</colgroup>
<thead valign="bottom">
<tr><th class="head">Client</th>
<th class="head">HTTP Module</th>
<th class="head">Client object</th>
<th class="head">CLI Arg</th>
<th class="head">Env Var</th>
</tr>
</thead>
<tbody valign="top">
<tr><td>keystone</td>
<td>httplib2</td>
<td>class.HTTPClient(httplib2.Http)</td>
<td>--os-cacert</td>
<td>OS_CACERT</td>
</tr>
<tr><td>nova</td>
<td>httplib2</td>
<td>class.HTTPClient(httplib2.Http)</td>
<td>n/a</td>
<td>n/a</td>
</tr>
<tr><td>cinder</td>
<td>httplib2</td>
<td>class.HTTPClient(httplib2.Http)</td>
<td>n/a</td>
<td>n/a</td>
</tr>
<tr><td>glance</td>
<td>httplib</td>
<td>class.HTTPClient(object)</td>
<td>--ca-file</td>
<td>n/a</td>
</tr>
<tr><td>swift</td>
<td>httplib</td>
<td>class Connection(object)</td>
<td>n/a</td>
<td>n/a</td>
</tr>
<tr><td>quantum</td>
<td>httplib2</td>
<td>class.HTTPClient(httplib2.Http)</td>
<td>n/a</td>
<td>n/a</td>
</tr>
</tbody>
</table>
<p>The approach taken for the <tt class="docutils literal">httplib2</tt> subclasses is to change the parent class to <tt class="docutils literal">object</tt> and rework the <tt class="docutils literal">request()</tt> method to call <tt class="docutils literal">requests.request()</tt>.  Some of the differences for <tt class="docutils literal">requests</tt> leaked out of that method but have been mostly containd within the <tt class="docutils literal">HTTPClient</tt> class.  All four of the clients (formerly) using <tt class="docutils literal">httplib2</tt> have implemented one or more features that can easily be handled by <tt class="docutils literal">requests</tt> (redirection) or should also be propogated to the other clients.  This is ripe for a refactor of <tt class="docutils literal">HTTPClient</tt> to a common module but that effort is not in scope here.</p>
<div class="section" id="keystoneclient">
<h2>keystoneclient</h2>
<p>Implemented in <a class="reference external" href="https://review.openstack.org/#/c/17624/">https://review.openstack.org/#/c/17624/</a> <em>(complete)</em></p>
<ul class="simple">
<li>replace <tt class="docutils literal">httplib2</tt> with <tt class="docutils literal">requests</tt></li>
</ul>
</div>
<div class="section" id="novaclient">
<h2>novaclient</h2>
<p>Implemented in <a class="reference external" href="https://review.openstack.org/#/c/18257/">https://review.openstack.org/#/c/18257/</a> <em>(complete)</em></p>
<ul class="simple">
<li>replace <tt class="docutils literal">httplib2</tt> with <tt class="docutils literal">requests</tt></li>
<li>add <tt class="docutils literal"><span class="pre">--os-cacert</span></tt> and <tt class="docutils literal">OS_CACERT</tt> support</li>
<li>provide <tt class="docutils literal">ca_cert</tt> to keystone client for authentication</li>
</ul>
</div>
<div class="section" id="cinderclient">
<h2>cinderclient</h2>
<p>Implemented in <a class="reference external" href="https://review.openstack.org/#/c/18278/">https://review.openstack.org/#/c/18278/</a> <em>(complete)</em></p>
<ul class="simple">
<li>replace <tt class="docutils literal">httplib2</tt> with <tt class="docutils literal">requests</tt></li>
<li>add <tt class="docutils literal"><span class="pre">--os-cacert</span></tt> and <tt class="docutils literal">OS_CACERT</tt> support</li>
<li>provide <tt class="docutils literal">ca_cert</tt> to keystone client for authentication</li>
</ul>
</div>
<div class="section" id="glanceclient">
<h2>glanceclient</h2>
<p>Implemented in <a class="reference external" href="https://review.openstack.org/#/c/17698/">https://review.openstack.org/#/c/17698/</a> <em>(complete)</em></p>
<ul class="simple">
<li>rename <tt class="docutils literal"><span class="pre">--ca-cert</span></tt> to <tt class="docutils literal"><span class="pre">--os-cacert</span></tt> and add <tt class="docutils literal">OS_CACERT</tt></li>
<li>provide <tt class="docutils literal">ca_cert</tt> to keystone client for authentication</li>
</ul>
</div>
<div class="section" id="swiftclient">
<h2>swiftclient</h2>
<p>Implemented in <a class="reference external" href="https://review.openstack.org/#/c/18393/">https://review.openstack.org/#/c/18393/</a> <em>(complete)</em></p>
<ul class="simple">
<li>add <tt class="docutils literal"><span class="pre">--os-cacert</span></tt> and <tt class="docutils literal">OS_CACERT</tt> support</li>
<li>provide <tt class="docutils literal">ca_cert</tt> to keystone client for authentication</li>
</ul>
</div>
<div class="section" id="quantumclient">
<h2>quantumclient</h2>
<p><em>(not started)</em></p>
<ul class="simple">
<li>replace <tt class="docutils literal">httplib2</tt> with <tt class="docutils literal">requests</tt></li>
<li>add <tt class="docutils literal"><span class="pre">--os-cacert</span></tt> and <tt class="docutils literal">OS_CACERT</tt> support</li>
<li>provide <tt class="docutils literal">ca_cert</tt> to keystone client for authentication</li>
</ul>
</div>
<div class="section" id="testing">
<h2>Testing</h2>
<p>Aside from the usual unit tests, support for a TLS proxy is being added to DevStack to demonstrate and test a TLS-enabled OpenStack configuration.  It uses <tt class="docutils literal">stud</tt> as the TLS endpoint that proxies to the usual service endpoints.  The most interesting challenge here is doing it all on a single host and making the service catalog work.  Yay!  This will be described in (hopefully) the next post in this series.</p>
<p>The TLS-in-DevStack also builds a two-tiered CA (root and intermediate) for testing proper certificate chain validation as described in <a class="reference external" href="/x/blog/2012/12/18/securing-openstack-client-connections-part-1/">the first installment</a>.</p>
</div>
</div>
<div class="section" id="links">
<h1>Links</h1>
<ul class="simple">
<li>glanceclient <tt class="docutils literal">host_matches_cert()</tt>: <a class="reference external" href="https://review.openstack.org/#/c/16305/4/glanceclient/common/http.py">https://review.openstack.org/#/c/16305/4/glanceclient/common/http.py</a></li>
<li><tt class="docutils literal">request</tt>'s <tt class="docutils literal">urllib3.ssl_match_hostname.match_hostname()</tt>: <a class="reference external" href="https://github.com/kennethreitz/requests/blob/master/requests/packages/urllib3/connectionpool.py#L72">https://github.com/kennethreitz/requests/blob/master/requests/packages/urllib3/connectionpool.py#L72</a> <a class="reference external" href="https://github.com/kennethreitz/requests/blob/master/requests/packages/urllib3/packages/ssl_match_hostname/__init__.py#L23">https://github.com/kennethreitz/requests/blob/master/requests/packages/urllib3/packages/ssl_match_hostname/__init__.py#L23</a></li>
</ul>
<hr class="docutils" />
<table class="docutils footnote" frame="void" id="id3" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td><a class="reference external" href="http://bugs.python.org/issue1589">Python issue 1589</a>, the comments about 2.x <a class="reference external" href="http://bugs.python.org/issue1589#msg120946">begin here</a>.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id4" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id2">[2]</a></td><td>The patches for the OpenStack CLIs were engineered and implemented before the release of <tt class="docutils literal">requests</tt> 1.0 which is a significantly different implementation and is untested in our application.</td></tr>
</tbody>
</table>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Securing OpenStack Client Connections Part 1</title>
      <link>http://hackstack.org/x/blog/2012/12/18/securing-openstack-client-connections-part-1</link>
      <pubDate>Tue, 18 Dec 2012 12:12:12 CST</pubDate>
      <category><![CDATA[openstack]]></category>
      <category><![CDATA[devstack]]></category>
      <guid isPermaLink="false">5jJXv_GXKDmqOhzJwtDRFGMV5ls=</guid>
      <description>Securing OpenStack Client Connections Part 1</description>
      <content:encoded><![CDATA[<div class="document">
<p>We all know that the difference between <tt class="docutils literal">https</tt> and <tt class="docutils literal">http</tt> is the addition of encryption, right?  Of course, but less attention is paid to the other purposes of SSL and TLS: to verify one or both of the parties involved in the connection and to validate that the objects used in the verification meet certain criteria. <a class="footnote-reference" href="#id3" id="id1">[1]</a>  In the common case of a user directing a web browser to a 'secure' site, only one side is potentially validated, that being the server.  Maybe.</p>
<p>Browsers generally go a good job of performing server certificate verification and validation but other https clients may not do so well.  Sometimes the web browser will pop up a box saying that the server is untrusted for one reason or another.  This can be the result of a failure to validate the server certificate or verifying that the name used to reach the server matches who the server claims to be.  It will usually contain the reason for the failure but generally it also contains a button to click on that allows the connection to proceed.  This effectively neuters the validation process and opens the door for server spoofing and man-in-the-middle attacks.</p>
<p>The point here is not to rehash the merits of that behaviour but to investigate the use of <tt class="docutils literal">https</tt> in the OpenStack Python clients and to validate their certificate verification.  And validation.  Mmmmmm...recursion...</p>
<div class="section" id="but-first">
<h1>But First</h1>
<p>Before we can delve into the world of Python modules and SSL wrappers we must first have a way to test against some known secure servers.  This means uncorking some OpenSSL-foo and entering the dark world of certificate authorities (CA).  &quot;But that's been covered to death!&quot; you may say.  Yes it has <a class="footnote-reference" href="#id4" id="id2">[2]</a>, but generally only to the level of self-sigining a cert for use in private servers.  I believe the common name for these certs is 'snakeoil'.  However, certificates in the real world are not only self-signed, but often signed by a CA that is itself signed by one or more parent CAs.  The root CA certificates are included in the lists shipped with most operating systems, browsers and even some programming libraries.</p>
<p>Our goal then is to build a server certificate that is a) signed by an intermediate CA and b) has the basic attributes and extensions common in real-world certificates.  To get that we need a root CA and an intermediate CA.  To get that we need some shell scripts and OpenSSL configuration files for each operation.</p>
<p>Note that in this exercise we do not encrypt the private keys as this is all used for development and testing of the SSL/TLS connections and should not be used for production.</p>
</div>
<div class="section" id="root-ca">
<h1>Root CA</h1>
<p>A self-signed certificate has the unique characteristic of the Issuer matches the Subject.  Creating a self-signed root CA is a common operation and has been covered many times elsewhere.  So here are the basics:</p>
<ul>
<li><p class="first">Create the root CA directory structure:</p>
<pre class="literal-block">
for i in certs crl newcerts private; do
    mkdir -p CA/root-ca/$i
done
chmod 710 CA/root-ca/private
echo &quot;01&quot; &gt;CA/root-ca/serial
touch CA/root-ca/index.txt
</pre>
</li>
<li><p class="first">Generate the root CA configuration file <tt class="docutils literal"><span class="pre">CA/root-ca/ca.conf</span></tt>:</p>
<pre class="literal-block">
echo '
[ ca ]
default_ca = CA_default

[ CA_default ]
dir                     = ./CA/root-ca
policy                  = policy_match
database                = $dir/index.txt
serial                  = $dir/serial
certs                   = $dir/certs
crl_dir                 = $dir/crl
new_certs_dir           = $dir/newcerts
certificate             = $dir/cacert.pem
private_key             = $dir/private/cacert.key
RANDFILE                = $dir/private/.rand
default_md              = default

[ req ]
default_bits            = 1024
default_md              = sha1

prompt                  = no
distinguished_name      = ca_distinguished_name

x509_extensions         = ca_extensions

[ ca_distinguished_name ]
organizationName        = Example Inc.
organizationalUnitName  = Certificate Authority
emailAddress            = ca&#64;example.com
commonName              = Example Inc Root CA

[ policy_match ]
countryName             = optional
stateOrProvinceName     = optional
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ ca_extensions ]
basicConstraints        = critical,CA:true
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always, issuer
keyUsage                = cRLSign, keyCertSign

' &gt;CA/root-ca/ca.conf
</pre>
<p>The <tt class="docutils literal">ca_distinguished_name</tt> section defines the full name of the root CA.</p>
</li>
<li><p class="first">Generate a private key and self-signed certificate:</p>
<pre class="literal-block">
openssl req -config CA/root-ca/ca.conf \
    -x509 \
    -nodes \
    -newkey rsa \
    -days 21360 \
    -keyout CA/root-ca/private/cacert.key \
    -out CA/root-ca/cacert.pem \
    -outform PEM
</pre>
</li>
<li><p class="first">Take a peek at the root certificate:</p>
<pre class="literal-block">
openssl x509 -noout -text -in CA/root-ca/cacert.pem
</pre>
</li>
</ul>
</div>
<div class="section" id="intermediate-ca">
<h1>Intermediate CA</h1>
<p>Creating an Intermediate CA is very similar except the root CA must do the signing so the process takes a couple of additional steps:</p>
<ul>
<li><p class="first">Create the intermediate CA directory structure:</p>
<pre class="literal-block">
for i in certs crl newcerts private; do
    mkdir -p CA/int-ca/$i
done
chmod 710 CA/int-ca/private
echo &quot;01&quot; &gt;CA/int-ca/serial
touch CA/int-ca/index.txt
</pre>
</li>
<li><p class="first">Generate the intermediate CA configuration file <tt class="docutils literal"><span class="pre">CA/int-ca/ca.conf</span></tt>:</p>
<pre class="literal-block">
echo '
[ ca ]
default_ca = CA_default

[ CA_default ]
dir                     = ./CA/int-ca
policy                  = policy_match
database                = $dir/index.txt
serial                  = $dir/serial
certs                   = $dir/certs
crl_dir                 = $dir/crl
new_certs_dir           = $dir/newcerts
certificate             = $dir/cacert.pem
private_key             = $dir/private/cacert.key
RANDFILE                = $dir/private/.rand
default_md              = default

[ req ]
default_bits            = 1024
default_md              = sha1

prompt                  = no
distinguished_name      = ca_distinguished_name

x509_extensions         = ca_extensions

[ ca_distinguished_name ]
organizationName        = Example Inc.
organizationalUnitName  = Certificate Authority
emailAddress            = ca&#64;example.com
commonName              = Example Inc Intermediate CA

[ policy_match ]
countryName             = optional
stateOrProvinceName     = optional
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ ca_extensions ]
basicConstraints        = critical,CA:true
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always, issuer
keyUsage                = cRLSign, keyCertSign

' &gt;CA/int-ca/ca.conf
</pre>
<p>Note that the <tt class="docutils literal">commonName</tt> in the <tt class="docutils literal">ca_distinguished_name</tt> section is different than the root CA.  The <tt class="docutils literal">ca_extensions</tt> section is also critical here, specifically the <tt class="docutils literal">keyUsage</tt> attribute containing the <tt class="docutils literal">keyCertSign</tt> so the certificate signed can be used itself to sign other certificates.</p>
</li>
<li><p class="first">Generate a private key and certificate signing request:</p>
<pre class="literal-block">
openssl req -config CA/int-ca/ca.conf \
    -sha1 \
    -nodes \
    -newkey rsa \
    -keyout CA/int-ca/private/cacert.key \
    -out CA/int-ca/int-ca.csr \
    -outform PEM
</pre>
</li>
<li><p class="first">Sign the CSR:</p>
<pre class="literal-block">
openssl ca -config CA/root-ca/ca.conf \
    -extensions ca_extensions \
    -days 365 \
    -notext \
    -in CA/int-ca/int-ca.csr \
    -out CA/int-ca/cacert.pem \
    -batch
</pre>
</li>
<li><p class="first">Create a trust chain, a file that contains the CA certificates from the immediate signing CA back to the root CA:</p>
<pre class="literal-block">
cat CA/root-ca/cacert.pem CA/int-ca/cacert.pem &gt;&gt;CA/int-ca/ca-chain.pem
</pre>
</li>
<li><p class="first">Take a peek at the intermediate certificate:</p>
<pre class="literal-block">
openssl x509 -noout -text -in CA/int-ca/cacert.pem
</pre>
</li>
</ul>
</div>
<div class="section" id="server-certificate">
<h1>Server Certificate</h1>
<p>This process is repeated for every server that needs a certificate.</p>
<ul>
<li><p class="first">Generate the intermediate CA signing configuration file <tt class="docutils literal"><span class="pre">CA/int-ca/sign.conf</span></tt>:</p>
<pre class="literal-block">
echo '
[ ca ]
default_ca = CA_default

[ CA_default ]
dir                     = ./CA/int-ca
policy                  = policy_match
database                = $dir/index.txt
serial                  = $dir/serial
certs                   = $dir/certs
crl_dir                 = $dir/crl
new_certs_dir           = $dir/newcerts
certificate             = $dir/cacert.pem
private_key             = $dir/private/cacert.key
RANDFILE                = $dir/private/.rand
default_md              = default

[ req ]
default_bits            = 1024
default_md              = sha1

prompt                  = no
distinguished_name      = req_distinguished_name

x509_extensions         = req_extensions

[ req_distinguished_name ]
organizationName        = Example Inc.

[ policy_match ]
countryName             = optional
stateOrProvinceName     = optional
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied

[ req_extensions ]
basicConstraints        = CA:false
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always, issuer
keyUsage                = digitalSignature, keyEncipherment, keyAgreement
extendedKeyUsage        = serverAuth, clientAuth
subjectAltName          = $ENV::SUBJECT_ALT_NAME

' &gt;CA/int-ca/sign.conf
</pre>
<p>The primary difference is in the <tt class="docutils literal">req_extensions</tt> section setting up for the certificates signed by this CA.  One of the bits often missed is the inclusion of the <tt class="docutils literal">subjectAltName</tt> that matches the <tt class="docutils literal">commonName</tt> and optionally includes additional names that the certificate is valid for.</p>
</li>
<li><p class="first">Generate a signing request:</p>
<pre class="literal-block">
openssl req \
    -sha1 \
    -nodes \
    -newkey rsa \
    -keyout CA/int-ca/private/cert.example.com.key \
    -out CA/int-ca/cert.example.com.csr \
    -subj '/O=Example Inc./OU=Servers/CN=cert.example.com'
</pre>
</li>
<li><p class="first">Sign the CSR, with an optional value for <tt class="docutils literal">subjectAltName</tt>:</p>
<pre class="literal-block">
SUBJECT_ALT_NAME=&quot;DNS: cert.example.com&quot; \
openssl ca -config CA/int-ca/sign.conf -extensions req_extensions -days 365 -notext \
    -out CA/int-ca/cert.example.com.crt \
    -in CA/int-ca/cert.example.com.csr \
    -batch
</pre>
<p>Setting the <tt class="docutils literal">SUBJECT_ALT_NAME</tt> environment variable is the easiest way to set <tt class="docutils literal">subjectAltName</tt> without rewriting the config file for each certificate.</p>
</li>
<li><p class="first">Take a peek at the server certificate:</p>
<pre class="literal-block">
openssl x509 -noout -text -in CA/int-ca/cert.example.com.pem
</pre>
</li>
</ul>
</div>
<div class="section" id="setting-up-the-server">
<h1>Setting Up the Server</h1>
<p>Server configurations differ but most will require the server certificate fiel created in the last step, the provate key file created in the CSR step and the CA chain file created in the previous section.  This is where encrypting the private key can make testing difficult and why we did not do that here.</p>
<p>Later installations in this series will demonstrate how to do this using the SSL/TLS proxy server <tt class="docutils literal">stud</tt>.</p>
<hr class="docutils" />
<table class="docutils footnote" frame="void" id="id3" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td><a class="reference external" href="https://www.google.com/search?q=http+vs+https">Find more about http vs https</a></td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id4" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id2">[2]</a></td><td><a class="reference external" href="http://www.google.com/search?q=openssl+certificate+authority">Find more about creating a CA with OpenSSL</a></td></tr>
</tbody>
</table>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>A Fedora 17 Image for OpenStack</title>
      <link>http://hackstack.org/x/blog/2012/11/13/a-fedora-17-image-for-openstack</link>
      <pubDate>Tue, 13 Nov 2012 11:13:00 CST</pubDate>
      <category><![CDATA[openstack]]></category>
      <category><![CDATA[fedora]]></category>
      <guid isPermaLink="false">yvYpRvk7kktXtE6rMWCqHSLLam4=</guid>
      <description>A Fedora 17 Image for OpenStack</description>
      <content:encoded><![CDATA[<div class="document">
<p><em>This worked well enough but has been superceeded by ``appliance-creator``</em></p>
<p>Ubuntu has these nice UEC images that make a great base for cloud appliances.  Fedora has nothing official although there are a couple of older images floating around (links please!).  Nothing for Fedora 17 though.  Let's build one!</p>
<p>The most flexible image builder seems to be oz, as it runs the standard install process and can build nearly anything that boots in KVM.  There are some specific <a class="reference external" href="http://libguestfs.org/guestfs-faq.1.html">requirements for libguestfs</a> and that usually doesn't work properly in a VM.  This all had to be done on bare metal.</p>
<p>Even then, building a Fedora 17 image required Fedora 17. OK, I found an old laptop that could do it and installed f17.</p>
<p>There are also some kickstart files floating around like <a class="reference external" href="https://github.com/rackerjoe/oz-image-build">Racker Joe's repo</a>  and I've stolen from them and from the default kickstart files in Oz.  So here's the <a class="reference external" href="/x/files/fedora17-x86_64.ks">bastard child</a>.</p>
<div class="section" id="oz">
<h1>Oz</h1>
<p>I had to build Oz from source as none of the available packages were current enough:</p>
<pre class="literal-block">
git clone https://github.com/clalancette/oz.git
cd oz
make rpm
sudo yum update ~/rpmbuild/RPMS/noarch/oz-0.10.0-0.20121022223625git17f9c7f.fc17.noarch.rpm
</pre>
<p>Build an image:</p>
<pre class="literal-block">
sudo oz-install -d4 -t6000 -u fedora17-x86_64.tdl -a fedora17-x86_64.ks
qemu-img convert -c -O qcow2 /var/lib/libvirt/images/fedora17-x86_64.dsk fedora17-x86_64.qcow2
</pre>
<p>Upload and boot the image:</p>
<pre class="literal-block">
glance image-create --is-public true --name &quot;Fedora 17 test 2&quot; --disk-format qcow2 --container-format bare --file fedora17-x86_64.qcow2
nova boot --image 94ceb563-41ee-43f6-a999-a3b738c0d299 --flavor 2 --key-name bunsen f17-2
</pre>
<p>This image still has some tweaking needed...</p>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Devstack At One</title>
      <link>http://hackstack.org/x/blog/2012/10/20/devstack-at-one</link>
      <pubDate>Sat, 20 Oct 2012 10:20:30 CDT</pubDate>
      <category><![CDATA[openstack]]></category>
      <category><![CDATA[devstack]]></category>
      <guid isPermaLink="false">B1-N3X8kQ0u1nCDSg0zla6v7QGA=</guid>
      <description>Devstack At One</description>
      <content:encoded><![CDATA[<div class="document">
<p>First birthdays are always fun...especially the bit where the birthday kidlet is encouraged to make a mess of the cake to the mild amusement of the adults present.  At least that's how it worked in the little burg where I grew up.  (Little burg?  Isn't that redundant?)  My parents have pictures of me doing that, I have pictures of my kids doing that, I anticipate the cycle will continue someday.</p>
<p>Now that the <a class="reference external" href="http://openstack.org">OpenStack</a> Grizzly Design Summit is over I realize that <a class="reference external" href="devstack.org">DevStack</a> is just over a year old, having been shown off for the first time at the Essex Design Summit in Boston.  We should have had a party!  Maybe I'll just retroactively declare one of the many during the week to be DevStack's birthday party.  Anyone care to vote on which one? (<em>cough*Nebula*cough</em>)  Look, DevStack still has a little cache on its face, how cute!</p>
<p>anotherjesse and sleepsonthefloor initially started building DevStack to address their own needs for OpenStack development and exploration.  They were scratching an itch as the saying goes, and it soon became apparent that this might be generally useful.  Over its first year DevStack has become the de facto quick way to build an OpenStack cloud for developers.  While it was (and still is) primarily targeted for development use it has been found in other interesting places, most promintely in the OpenStack Continuous Integration gating tests.</p>
<p>The original goals of DevStack remain as its primary guide:</p>
<ul class="simple">
<li>provide an environment for development and basic testing of OpenStack with and quick turnaround times and easy access to debug logs and output</li>
<li>provide an example of one way to configure OpenStack and provide a simple mechanism to try different configurations</li>
<li>support multiple deployment environments (bare metal, VMs, ramdisk, etc)</li>
</ul>
<p>We have largely stayed true to those goals and IMHO achieved them in large part.  As new uses of DevStack have come to light we added</p>
<ul class="simple">
<li>provide a basic platform for CI testing and gating of OpenStack commits</li>
</ul>
<div class="section" id="what-just-happened">
<h1>What Just Happened?</h1>
<p>Honestly it feels like not much has happened on DevStack since I started working on Grenade.  In reality, I look at the commits and see some significant developments that are worth noting for those who don't spend their coffee breaks looking at commit logs.  In early October we split off a stable/folsom branch of DevStack and configured it to pull stable/folsom branches from the project repos.  Everything below happened before stable/folsom was created.</p>
<ul class="simple">
<li><strong>Tell stack.sh to shut up!</strong>  The logging in <tt class="docutils literal">stack.sh</tt> was re-worked to allow writing the familiar xtrace stream to the <tt class="docutils literal">stack.sh.log</tt> files but only display a limited number of status messages in the console window.  Set <tt class="docutils literal">VERBOSE=False</tt> in <tt class="docutils literal">localrc</tt> to relieve your eyes from having to look at that stream that is busier than a VMS boot log.</li>
<li><strong>Ceilometer and HEAT are now available!</strong>  You can now incorporate both projects into your DevStack install in the same install-from-source mode that the other projects use.</li>
<li><strong>Cinder is the default volume service!</strong>  Nova volumes will take a powder sometime during Grizzly so we're using that new kid, Cinder, to provide block storage.  Stop by and see how jgriffith is doing, maybe he'll put you on a horse.</li>
<li><strong>Get smarter about loading images into Glance from IMAGE_URLS!</strong>  It is the little things in life, like properly set image disk types in Glance, that make the difference between 'Life Is Good' and 'Life Is Pretty Good'.  What's next, setting the sticky bit on public images?</li>
<li><strong>Exclamation points are on clearance!</strong>  Just checking to see if you were paying attention.  Unfortunately the only ones left are all in Comic Sans.</li>
<li><strong>Keystone backend is SQL by default!</strong>  <tt class="docutils literal">default_catalog.templates</tt> is dead, long live <tt class="docutils literal">default_catalog.templates</tt>!  Unless of course you set <tt class="docutils literal"><span class="pre">KEYSTONE_CATALOG_BACKEND=not-sql</span></tt> (really, we test for 'sql' so anything else resurrects the old way).</li>
</ul>
</div>
<div class="section" id="near-term-development">
<h1>Near-term Development</h1>
<p>I can her you thinking &quot;OK, all that is well and good, but what have you done for me today?&quot;  Humph.  Lurking in design summit sessions that decide the future of OpenStack's DNS strategy or hallway^H^H^H^H^H^HDeveloper Lounge conversations about how to refactor MySQL configuration in <tt class="docutils literal">stack.sh</tt> or scruitinizing the debut of Dope'n'Stack's latest release or dutifully searching for non-coffee-or-tea-based caffeine isn't enough?</p>
<p>We added some important things from the design summit to the list, presented here in no particular order so don't get any ideas:</p>
<ul class="simple">
<li>sdague's arm should be straightened out by the time he returns home and begins doing core reviews on DevStack.  <em>[Ed: After further review it seems that he didn't wait.]</em></li>
<li>In other sdague news, he is also planning to implement support for PostgreSQL.  And factor out the aforementioned MySQL support from <tt class="docutils literal">stack.sh</tt> in the process.</li>
<li>That pesky new kid Grenade wants, nee demands, the completion of the project re-factoring from <tt class="docutils literal">stack.sh</tt> so it can include the results in the <tt class="docutils literal"><span class="pre">upgrade-*</span></tt> scripts.</li>
<li>Rework the dependency system to be more portable across multiple distros.  Most of the python dependencies are handled by pip out of the <tt class="docutils literal"><span class="pre">tools/pip-requires</span></tt> files in the project source trees but the remaining packaged dependencies need to be specified per-project to ensure they are present when that project is enabled.  The existing system is simple but maybe a little too simple especially to support differences between multiple RPM-based distros (hello OpenSUSE!)</li>
<li>Finalize Quantal support.  Actually that may be done already but someone should check before he shoots his mouth off and says it is done.</li>
</ul>
</div>
<div class="section" id="wild-hares">
<h1>Wild Hares</h1>
<p>Try these ideas on for size:</p>
<ul class="simple">
<li>sliced bread</li>
<li><a class="reference external" href="http://www.alibaba.com/showroom/inflatable-dart-board.html">inflatable dart board</a></li>
<li>GOTO</li>
<li><a class="reference external" href="http://en.wikipedia.org/wiki/New_Coke">New Coke</a></li>
</ul>
<p>Not everything is a good idea and not everything makes it into the master branch which means often good ideas don't make the cut.  Whether good or bad, here are some ideas suggested for DevStack that will not be implemented and here is why:</p>
<ul class="simple">
<li><strong>Rewrite in Python?</strong> One of the primary goals of DevStack is to demonstrate one simple way to set up OpenStack.  We feel that is best served using shell scripts that are accessible to more people, especially to implementors who are not developers.</li>
<li><strong>Start/run services under upstart/init/whatever?</strong> The OpenStack services run in screen to simplify developer access to stop and re-start the services during the development cycle.</li>
<li><strong>Install OpenStack from packages?</strong> This mode becomes extremely hard to convert a project from using the packaged code to a repo checked out from GitHub.  There may be enough demand to warrant wrapping the Ubuntu or Fedora package installs with some default configuration that produces an end-result similar to DevStack but we're going to leave that for someon else to tackle.</li>
</ul>
</div>
<div class="section" id="resources">
<h1>Resources</h1>
<p>Please excuse us while we wipe the cache off DevStack's face and get back to the freaking cool job of aiding and abetting the creation of more <tt class="docutils literal">&lt;echo <span class="pre">delay=&quot;0.3ms&quot;</span> <span class="pre">repeat=&quot;6&quot;&gt;</span></tt> Software With Which To Rule The World! <tt class="docutils literal">&lt;/echo&gt;</tt>.  In the mean time here's where to track down the whos-and-whats mentioned above.</p>
<ul class="simple">
<li>DevStack site: <a class="reference external" href="http://devstack.org">http://devstack.org</a></li>
<li>FAQ: <a class="reference external" href="http://devstack.org/faq.html">http://devstack.org/faq.html</a></li>
<li>Recent Changes: <a class="reference external" href="http://devstack.org/changes.html">http://devstack.org/changes.html</a></li>
</ul>
</div>
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>
