<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>HackStack Posts</title>
    <link>http://hackstack.org/x/blog</link>
    <description>OpenStack and other hackish things</description>
    <pubDate>Mon, 30 Mar 2015 22:32:10 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>More Notes on Windows Images</title>
      <link>http://hackstack.org/x/blog/2014/07/13/more-notes-on-windows-images</link>
      <pubDate>Sun, 13 Jul 2014 07:13:00 CDT</pubDate>
      <category><![CDATA[windows]]></category>
      <category><![CDATA[openstack]]></category>
      <guid isPermaLink="false">_MyylKSqiFGJ3m4qsDhVRwgOUEs=</guid>
      <description>More Notes on Windows Images</description>
      <content:encoded><![CDATA[<div class="document">
<p>This is a follow-up to <a class="reference external" href="/x/blog/2014/07/07/windows-images-for-openstack/">Windows Images for OpenStack</a> that includes some of the notes accumulated along the way.</p>
<div class="section" id="other-docs">
<h1>Other Docs</h1>
<p>Building Windows VM images is a topic that has been done to death, but the working consensus of those I've talked to is that <a class="reference external" href="http://www.florentflament.com/blog/windows-images-for-openstack.html">Florent Flament's post</a> is one of the best guides through this minefield.</p>
</div>
<div class="section" id="metadata-server-curl-commands">
<h1>Metadata Server Curl Commands</h1>
<p>Instance UUID:</p>
<blockquote>
curl <a class="reference external" href="http://169.254.169.254/openstack/latest/meta_data.json">http://169.254.169.254/openstack/latest/meta_data.json</a> | python -c 'import sys, json; print json.load(sys.stdin)[&quot;uuid&quot;]'</blockquote>
<p>Instance Name:</p>
<blockquote>
curl <a class="reference external" href="http://169.254.169.254/openstack/latest/meta_data.json">http://169.254.169.254/openstack/latest/meta_data.json</a> | python -c 'import sys, json; print json.load(sys.stdin)[&quot;name&quot;]'</blockquote>
<p>Fixed IP:</p>
<blockquote>
curl <a class="reference external" href="http://169.254.169.254/latest/meta-data/local-ipv4">http://169.254.169.254/latest/meta-data/local-ipv4</a></blockquote>
<p>Floating IP:</p>
<blockquote>
curl <a class="reference external" href="http://169.254.169.254/latest/meta-data/public-ipv4">http://169.254.169.254/latest/meta-data/public-ipv4</a></blockquote>
</div>
<div class="section" id="building-on-an-openstack-cloud">
<h1>Building on an OpenStack Cloud</h1>
<p>One of the changes to the base instructions is to perform the build in an OpenStack cloud.  The compute node must have nested virtualization enabled so KVM will run, otherwise Qemu would be used and we just don't have time for that.</p>
<p>I'm going to use <a class="reference external" href="https://github.com/cloudenvy/cloudenvy">Cloudenvy</a> to manage the build VM.  It is similar to Vagrant in automating the grunt work of provisioning the VM.  The VM needs to have at least 4Gb RAM and 40Gb disk available in order to boot the seed Windows image.  This is an <tt class="docutils literal">n1.medium</tt> flavor on the private cloud I am using.</p>
<p>I am also using Ubuntu 14.04 because much of my tooling already assumes an Ubuntu build environment.  There is no technical reason that Fedora 20 could not be used, appropriate adjustments would need to be made, of course.</p>
<div class="section" id="build-vm">
<h2>Build VM</h2>
<p>I am not going to spend much time here explaining Cloudenvy's configuration, but there are two things required to not have a bad time with it.</p>
<p>Configure your cloud credentials in <tt class="docutils literal"><span class="pre">~/.cloudenvy</span></tt>:</p>
<pre class="literal-block">
cloudenvy:
    keypair_name: dev-key
    keypair_location: ~/.ssh/id_rsa-dev-key.pub
    clouds:
        cloud9:
            os_auth_url: https://cloud9.slackersatwork.com:2884/v2.0/
            os_tenant_name: demo
            os_username: demo
            os_password: secrete
</pre>
<pre class="literal-block">
project_config:
    name: imagebuilder
    image: Ubuntu 14.04
    remote_user: ubuntu
    flavor_name: n1.medium

sec_groups: [
    'tcp, 22, 22, 0.0.0.0/0',
    'tcp, 5900, 5919, 0.0.0.0/0',
    'icmp, -1, -1, 0.0.0.0/0'
]

files:
    Makefile: '~'
    ~/.cloud9.conf: '~'

provision_scripts:
    - install-prereqs.sh
</pre>
<p>The <tt class="docutils literal"><span class="pre">~/.cloud9.conf</span></tt> file is a simple script fragment that sets the <tt class="docutils literal">OS_*</tt> environment variable credentials required to authenticate using the OpenStack CLI tools.  It looks something like:</p>
<pre class="literal-block">
export OS_AUTH_URL=https://cloud9.slackersatwork.com:2884/v2.0/
export OS_TENANT_NAME=demo
export OS_USERNAME=demo
export OS_PASSWORD=secrete
</pre>
<p>Why do we need two sets of credentials?  Because we haven't taught Cloudenvy to read the usual environment variables yet.  I smell a pull request in my future...</p>
<p>Fire it up and log in:</p>
<pre class="literal-block">
envy up
envy ssh
</pre>
<p>At this point we can switch over to Flament's process.</p>
<p>Or we can use the cloudbase auto-answer template</p>
<p>Get the ISO:</p>
<pre class="literal-block">
&gt;en_windows_7_professional_with_sp1_x64_dvd_u_676939.iso
for i in aa ab ac ad ae af ag ah; do \
    swift download windows7 en_windows_7_professional_with_sp1_x64_dvd_u_676939.iso-$i; \
    cat en_windows_7_professional_with_sp1_x64_dvd_u_676939.iso-$i &gt;&gt;en_windows_7_professional_with_sp1_x64_dvd_u_676939.iso
done
</pre>
<p>sudo ./make-floppy.sh</p>
<hr class="docutils" />
<pre class="literal-block">
# add keypair if not already there
os keypair create --public-key ~/.ssh/id_rsa.pub $(hostname -s)

# Create VM
os server create \
  --image &quot;Ubuntu 14.04&quot; \
  --flavor n1.tiny \
  --key-name bunsen \
  --user-data cconfig.txt \
  --wait \
  dt-1

export IP=$(os server show dt-1 -f value -c addresses | cut -d '=' -f2)

# Go to there
ssh ubuntu&#64;$IP
</pre>
<hr class="docutils" />
<p>Now on to Florent's steps</p>
<ul>
<li><p class="first">Create a virtual disk</p>
<blockquote>
<p>qemu-img create -f qcow2 Windows-Server-2008-R2.qcow2 9G</p>
</blockquote>
</li>
<li><p class="first">Boot the install VM</p>
</li>
</ul>
<pre class="literal-block">
kvm \
    -m 2048 \
    -cdrom &lt;WINDOWS_INSTALLER_ISO&gt; \
    -drive file=Windows-Server-2008-R2.qcow2,if=virtio \
    -drive file=&lt;VIRTIO_DRIVERS_ISO&gt;,index=3,media=cdrom \
    -net nic,model=virtio \
    -net user \
    -nographic \
    -vnc :9 \
    -k fr \
    -usbdevice tablet
</pre>
<p>Connect via VNC to :9</p>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Windows Images for OpenStack</title>
      <link>http://hackstack.org/x/blog/2014/07/07/windows-images-for-openstack</link>
      <pubDate>Mon, 07 Jul 2014 07:07:00 CDT</pubDate>
      <category><![CDATA[windows]]></category>
      <category><![CDATA[openstack]]></category>
      <category><![CDATA[virtualbox]]></category>
      <guid isPermaLink="false">NEdHQUMnNDPOA2ZMbkUe63N2oT0=</guid>
      <description>Windows Images for OpenStack</description>
      <content:encoded><![CDATA[<div class="document">
<p>There is no shortage of articles online about building Windows images for use in various clouds.  What there is a shortage of are working articles on building these images unattended.  The Windows unattended install process has been basically solved, even if still a bit arcane.  But finding more than a trivial example of doing it in a cloud is sparse.</p>
<p>Cloudbase has <a class="reference external" href="https://github.com/cloudbase/windows-openstack-imaging-tools">shared the tooling</a> they created for building their Windows images.  That makes a good base for an automated build process that can be tailored to your particular needs.  in addition to being the authors of cloudbase-init, their GitHub account is a trove of resources for Windows admins.</p>
<p>Since I had a Windows 7 Professional ISO handy I used that for the example...</p>
<div class="section" id="requirements">
<h1>Requirements</h1>
<p>The resulting image must:</p>
<ul class="simple">
<li>have RedHat's VirtIO drivers installed</li>
<li>use <tt class="docutils literal"><span class="pre">cloudbase-init</span></tt> for metadata handling</li>
</ul>
</div>
<div class="section" id="build-in-virtualbox">
<h1>Build In VirtualBox</h1>
<p>The Cloudbase process is designed to perform the build using KVM.  Ideally, it would be possible to boot a VM in an OpenStack cloud from the install ISO and let it go, but it turns out this is hard.  The unattended install process  requires two ISO images and a floppy image attached to the VM in addition to the target disk device. OpenStack currently has no way to do all of these attachments.  The alternative is to stash autounattend.xml and the virtio drivers in the Windows install ISO, but this requires a rebuild/upload for _every_ change to the install scripts.</p>
<p>So normally this means a Linux on bare-metal install is required.  How hard is it to dig up a laptop with Trusty on it?  Hard, if you're me.</p>
<p>I've heard that using VirtualBox doesn't work for some reason, but these reasons haven't been made clear to me so I didn't know I couldn't do what I'm describing here.</p>
<div class="section" id="auto-answer-changes">
<h2>Auto Answer Changes</h2>
<p>One of the main change to Cloudbase's setup is to put the PowerShell scripts on the floppy with Autounattend.xml.  This ensures that the files are matched together and changes in the repo doesn't break our working setup.</p>
<p>The Autounattend.xml file has a couple of changes other than those required to run the script from the floppy:</p>
<ul class="simple">
<li>Add the MetaData value for Win7</li>
<li>Since this is Win7, we need to enable the account stanza</li>
<li>Install a public product key</li>
<li>Fix a spacing error in the Microsoft-Windows-International-Core-WinPE component element</li>
</ul>
</div>
<div class="section" id="powershell-script-changes">
<h2>PowerShell Script Changes</h2>
<p>The primary change to the PowerShell scripts is to remove the file downloads and retrieve them from the floppy instead.</p>
</div>
<div class="section" id="make-the-floppy-image">
<h2>Make the Floppy Image</h2>
<p>I used <a class="reference external" href="/x/files/make-floppy.sh">this script</a> to create the floppy image, it builds a new image, mounts it, copies the appropriate Autounattend.xml and PowerShell scripts and other files, then umnounts the image.</p>
</div>
<div class="section" id="build-vm-configuration">
<h2>Build VM Configuration</h2>
<p>Automating a VBox build includes creating the VM to be used.  The <tt class="docutils literal">VBoxManage</tt> tool is the simple way to do this from a script and that's exactly what I've done here.</p>
<p>It turns out that 16Gb is not enough for Windows 7 installation once all of the updates are installed.  There are a LOT of them, 157 at this writing.  Even though this only needs to be done once, it takes a long time to apply them and it might be worthwhile to obtain media with the updates pre-applied.</p>
<p>The commands here are taken from the <tt class="docutils literal"><span class="pre">build-vb.sh</span></tt> script.</p>
<p>Create a new empty VM and disk:</p>
<pre class="literal-block">
BASE_NAME='win-build'
# Create a new empty VM
VBoxManage createvm --name &quot;$BASE_NAME&quot; --ostype &quot;$OS_TYPE&quot; --register
VBoxManage createhd --filename &quot;$VM_DIR/$BASE_NAME.vdi&quot; --size $DISK_SIZE
</pre>
<p>The disk configuration is an important part of this process so everything is found as required.  In addition to the install disk and install ISO a second ISO must be mounted containing the VirtIO drivers and a floppy image with the Autounattend.xml and Powershell scripts:</p>
<pre class="literal-block">
# SATA Controller
VBoxManage storagectl &quot;$BASE_NAME&quot; --name &quot;SATA&quot; --add sata
VBoxManage storageattach &quot;$BASE_NAME&quot; --storagectl &quot;SATA&quot; --type hdd \
    --port 0 --device 0 --medium &quot;$VM_DIR/$BASE_NAME.vdi&quot;

# Make IDE disks
VBoxManage storagectl &quot;$BASE_NAME&quot; --name &quot;IDE&quot; --add ide
VBoxManage storageattach &quot;$BASE_NAME&quot; --storagectl &quot;IDE&quot;  --type dvddrive \
    --port 0  --device 0 --medium &quot;$WIN_ISO&quot;
VBoxManage storageattach &quot;$BASE_NAME&quot; --storagectl &quot;IDE&quot;  --type dvddrive \
    --port 1  --device 0 --medium &quot;$VIRTIO_ISO&quot;

# Floppy disk image
VBoxManage storagectl &quot;$BASE_NAME&quot; --name &quot;Floppy&quot; --add floppy
VBoxManage storageattach &quot;$BASE_NAME&quot; --storagectl &quot;Floppy&quot; --type fdd \
    --port 0 --device 0 --medium &quot;$FLOPPY&quot;
</pre>
<p>Do the remaining basic configuration, including a virtio NIC to tickle Windows to install the drivers:</p>
<pre class="literal-block">
# General Config
VBoxManage modifyvm &quot;$BASE_NAME&quot; --cpus 2
VBoxManage modifyvm &quot;$BASE_NAME&quot; --memory $RAM_SIZE --vram 24
VBoxManage modifyvm &quot;$BASE_NAME&quot; --ioapic on

VBoxManage modifyvm &quot;$BASE_NAME&quot; --nic1 nat --bridgeadapter1 e1000g0
VBoxManage modifyvm &quot;$BASE_NAME&quot; --nic2 nat
VBoxManage modifyvm &quot;$BASE_NAME&quot; --nictype2 virtio

VBoxManage modifyvm &quot;$BASE_NAME&quot; --boot1 dvd --boot2 disk --boot3 none --boot4 none
</pre>
<p>Kick off the build process:</p>
<pre class="literal-block">
VBoxManage startvm &quot;$BASE_NAME&quot; --type gui
</pre>
<p>Convert the disk from VDI to QCOW2 format for uploading into the image store:</p>
<pre class="literal-block">
qemu-img convert -p -O qcow &quot;$VM_DIR/$BASE_NAME.vdi&quot; &quot;$VM_DIR/$BASE_NAME.qcow&quot;
</pre>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>OpenStack Clients</title>
      <link>http://hackstack.org/x/blog/2013/06/20/openstack-clients</link>
      <pubDate>Thu, 20 Jun 2013 06:20:00 CDT</pubDate>
      <category><![CDATA[windows]]></category>
      <category><![CDATA[openstack]]></category>
      <guid isPermaLink="false">ORQg9UezE3vW3Fmm8VvDLdWq53E=</guid>
      <description>OpenStack Clients</description>
      <content:encoded><![CDATA[<h2 id="openstack-client-projects">OpenStack Client Projects</h2>
<p>The developers of OpenStack maintain a series of <a href="https://wiki.openstack.org/wiki/ProjectTypes">library projects</a> which are the Python interfaces to the OpenStack REST APIs and also include command-line clients:</p>
<ul>
<li><a href="http://launchpad.net/python-ceilometerclient">python-ceilometerclient</a></li>
<li><a href="http://launchpad.net/python-cinderclient">python-cinderclient</a></li>
<li><a href="http://launchpad.net/python-glanceclient">python-glanceclient</a></li>
<li><a href="http://launchpad.net/python-heatclient">python-heatclient</a></li>
<li><a href="http://launchpad.net/python-keystoneclient">python-keystoneclient</a></li>
<li><a href="http://launchpad.net/python-novaclient">python-novaclient</a></li>
<li><a href="http://launchpad.net/python-quantumclient">python-quantumclient</a></li>
<li><a href="http://launchpad.net/python-swiftclient">python-swiftclient</a></li>
</ul>
<p>Each project is managed through the same development process as the integrated OpenStack projects so you can expect to find the latest source on <a href="http://github.com/openstack">GitHub</a>. The master branch in the project repositories should theoretically never be 'broken,' but realistically they are not tested between releases with the same vigor as the core projects. The bug and feature tracking happens on Launchpad; each of the projects above are linked to their respective Launchpad projects.</p>
<p>The client libraries are simply REST (HTTP) API clients and are backward compatible with the core supported API versions. For example, <code>python-novaclient</code> works with any version of Nova that supports matching API versions.  The client projects are versioned and released to PyPI independently of the integrated OpenStack releases.  There is no 'Grizzly' version of <code>python-novaclient</code>, for example, but any <code>python-novaclient</code> released after Grizzly's release will be compatible as long as the same API versions are enabled.</p>
<h2 id="installing-the-clients">Installing the Clients</h2>
<p>Official releases of the clients are distributed by developers through <a href="http://pypi.python.org">PyPi</a>.  Some Linux distributions also package the clients in their native format (RPM, APT, etc).  As the client projects are still evolving quite rapidly, the packages distributed by the distributions can fall out of date.  However, the client packages distributed with Grizzly server packages will be known to be compatible with Grizzly.</p>
<p>Users who want to be curent or are working with OpenStack development releases will want to install the clients from PyPi. As there are drawbacks to using PyPi both methods will be covered here.</p>
<p>Most of the installation steps here require administrative privileges.  Python virtual environments (virtualenvs) can be used to work around this if necessary, in addition to their other benefits (see below).</p>
<h3 id="python-runtime">Python Runtime</h3>
<p>OpenStack command line clients consist of a set of Python modules and their dependencies. There are three layers to the Python stack: a Python runtime, the Python modules that provide an interface to PyPI and the client library modules and their dependencies.  All supported platforms (Linux, OS X and Windows) have all of these layers but only Windows doesn't include any of them in the box so everything from the ground up needs to be installed.  And there is more than one way to do it.</p>
<p>The OpenStack client libraries are officially supported on Python 2.6 and 2.7.  While Python 3 is also available for all of these platforms, the work to support it in the clients is underway but not yet complete.</p>
<h4 id="linux-installation">Linux Installation</h4>
<p>Linux distributions usually include Python installed by default.  While all recent releases are Python 2.6 or 2.7, some long-term-support distributions may still contain Python 2.5 or older and require a newer Python runtime.  For example, <a href="https://wiki.openstack.org/wiki/NovaInstall/CentOSNotes#CentOS_5.2F_RHEL_5_.2F_Oracle_Enterprise_Linux_5">the OpenStack wiki</a> documents installing Nova on RHEL 5 and friends.  From that document the steps to enable the EPEL repo and install Python 2.6 are sufficient to support installing the client libraries.</p>
<h4 id="os-x-installation">OS X Installation</h4>
<p>All OS X releases since 10.6 (Snow Leopard) include a supported Python runtime although it is usually a few minor versions behind the current release.  Alternatives are available to install current versions of Python but are out of scope here.</p>
<p>OS X 10.5 (Leopard) includes Python 2.5.1 and needs to have particular considerations addressed in order to update it.  See the <a href="http://wiki.python.org/moin/MacPython/Leopard">Leopard wiki page</a> for more information.  </p>
<h4 id="windows-installation">Windows Installation</h4>
<p>Windows has a couple of options for Python installations.  Each Python release includes official Python binaries for both 32-bit and 64-bit Windows. The python.org <a href="http://www.python.org/getit/windows/">Windows releases</a> page lists some of the other Python runtime packages that are available.  One additional that will be familiar to UNIX users living in a Windows world is the <a href="http://www.cygwin.com/">Cygwin</a> Python port. Once Cygwin's Python interpreter is installed the rest is very similar to the steps here.</p>
<p>This guide will use the official 32 bit 2.7.5 runtime on Windows 7 as the example installation but it also works on XP and Vista.  The Python interpreter can be installed anywhere, the default folder is <code>C:\Python27</code>.  If you change it remember to make the corresponding change in the rest of this guide.  Also, be aware that putting it in certain places, such as <code>Program files</code>, will cause Windows UAC in Vista and newer to require an administrative token to perform module installs.  While not impossible to deal with, this is currently beyond the scope of this guide.</p>
<ul>
<li>
<p>Download and install the <a href="http://www.python.org/ftp/python/2.7.5/python-2.7.5.msi">Windows runtime installer</a>:</p>
<ul>
<li><strong>Select whether to install Python for all users of this computer</strong>: Select 'Install for all users'</li>
<li><strong>Select Destination Directory</strong>: The default Destination Directory is <code>C:\Python27\</code>.</li>
<li><strong>Customize Python</strong>: The default selections are fine.  At a minimum the
  <strong>Register Extensions</strong> and <strong>Utility Scripts</strong> selections should be enabled.</li>
</ul>
</li>
<li>
<p>Add the destination directory to the System PATH via Control Panel:</p>
<ul>
<li>On Windows XP: <strong>Control Panel → System → Advanced → Environment Variables</strong></li>
<li>On Windows 7: <strong>Control Panel → System and Security → System → Advanced system settings → Environment Variables</strong></li>
<li>Edit the Path entry in the <strong>System variables</strong> list</li>
<li>Add the Python installation path and the Python scripts directory to the beginning
  of the Path variable: <code>C:\Python27;C:\Python27\Scripts;</code></li>
</ul>
</li>
</ul>
<p>Open a command prompt window and test the Python installation:</p>
<pre><code>Microsoft Windows [Version 6.1.7601]
Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

C:\Users\fozzier&gt;python
Python 2.7.5 (default, May 15 2013, 22:43:36) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</code></pre>
<h3 id="python-module-distribution">Python Module Distribution</h3>
<p>In addition to the base Python runtime some additional modules are required to bootstrap an environment for the OpenStack client install.  The state of packaging in the Python world can be describes as 'in flux' at best.  That said, OpenStack uses the Python Package Index (PyPI) as its source of released packaged modules.</p>
<p>PyPI provides a mechanism to install released versions of Python libraries and tools directly.  The <code>pip</code> command is the interface to PyPI and performs the download and install functions as well as dependency resolution (albiet occasionally poorly).  It does not play well with packages installed by the native package managers on some systems (<em>cough</em> Red Hat <em>cough</em>). The former is a shortcoming that continues to be slowly addressed by the Python community but the latter can be treated with a tool called <code>virtualenv</code> (see below).</p>
<p>Many Python modules have also been packaged by Linux distributions and can be installed using the native package manager.  Often it is beneficial to install the vendor packages for hybrid modules especially if a C compiler is not present, or not desired, on the system.  The consensus in the OpenStack community is not to mix the two methods any more than necessary.</p>
<h4 id="pypi-and-pip">PyPI and pip</h4>
<p>The <a href="http://www.pip-installer.org/">pip</a> command must be installed to use PyPI and for non-native package installations that is best done using <code>easy_install</code> which itself needs to be installed as part of the <code>setuptools</code> module.  Check to see if <code>setuptools</code> is installed:</p>
<pre><code>python -c "import setuptools"
</code></pre>
<p>If <code>setuptools</code> is not installed an error similar to this will be displayed:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
ImportError: No module named setuptools
</code></pre>
<ul>
<li>
<p>If necessary, install <a href="https://pypi.python.org/pypi/setuptools/0.7.4">setuptools</a> using the <a href="https://bitbucket.org/pypa/setuptools/raw/0.7.4/ez_setup.py">ez_setup.py</a> script:</p>
<pre><code>python ez_setup.py
</code></pre>
</li>
<li>
<p>Install <code>pip</code> using <code>easy_install</code>:</p>
<pre><code>easy_install pip
</code></pre>
</li>
</ul>
<h4 id="hybrid-python-modules">Hybrid Python Modules</h4>
<p>Some common Python modules are not pure Python and require a C compiler to install from PyPI.  On Linux these are generally installed via native system packages.  On Windows many of these packages also have Windows binary installers that can be used with the official Python runtime. </p>
<p>OpenStack's Glance client requires <code>pyOpenSSL</code> which is one of these hybrid packages.  On Linux install the vendor-supplied package. OS X 10.7 and newer include an acceptable version.  On Windows it can be installed from PyPI directly using the supplied binary Windows install package:</p>
<ul>
<li>
<p>Download and install the <a href="https://pypi.python.org/packages/2.7/p/pyOpenSSL/pyOpenSSL-0.13.winxp32-py2.7.msi">pyOpenSSL installer</a>:</p>
<ul>
<li><strong>Select whether to install Python for all users of this computer</strong>: Select 'Install for all users'</li>
<li><strong>Select Python Installations</strong>: The default Python installation should be the one installed above.  Use it.</li>
</ul>
</li>
</ul>
<h4 id="openstack-client-libraries">OpenStack Client Libraries</h4>
<p>Installing the client libraries from PyPI will also bring in the required dependencies.  This step is the same for all platforms.</p>
<ul>
<li>
<p>Install the client libraries from PyPI:</p>
<pre><code>pip install python-keystoneclient python-novaclient python-cinderclient \
  python-glanceclient python-swiftclient
</code></pre>
</li>
</ul>
<h4 id="virtualenv">virtualenv</h4>
<p>Using <code>pip</code> in conjunction with a tool called <code>virtualenv</code> can be used to isolate the PyPi packages you install from your system packages. Install <code>virtualenv</code> using <code>pip</code>:</p>
<pre><code>pip install virtualenv
</code></pre>
<p>A new virtual environment is created and activated with the following commands:</p>
<pre><code>virtualenv ~/openstack-venv
source ~/openstack-venv/bin/activate
</code></pre>
<p>Once activated all packages installed with <code>pip</code> will be placed into the virtual environment without affecting or conflicting with the root system:</p>
<pre><code>pip install python-novaclient
</code></pre>
<p>Deactivating your virtual evironment is as simple as this:</p>
<pre><code>deactivate
</code></pre>
<p>For those of you that want to level-up your <code>virtualenv</code> experience, use a tool called <code>virtualenvwrapper</code>. It abstracts away the management of the virtual environment directories on your local system:</p>
<pre><code>mkvirtualenv openstack-venv
workon openstack-venv

pip install python-novaclient

deactivate
rmvirtualenv openstack-venv
</code></pre>
<h3 id="distro-specific-package-managers">Distro-specific Package Managers</h3>
<p>There are a couple of tradeoffs when consuming packages from distro-managed repositories. In the case of the OpenStack clients, development happens so rapidly that these repositories can grow stale very quickly. In the case that you still want to use a distro-specific package manager, it should be as simple as installing the python-*client packages. For example, here's how you can install python-novaclient on Ubuntu:</p>
<pre><code>apt-get install python-novaclient
</code></pre>
<h2 id="using-the-clients">Using the Clients</h2>
<h3 id="authentication">Authentication</h3>
<p>The first thing to tackle is authentication. Each of the OpenStack clients supports a set of common command-line arguments for this:</p>
<pre><code>--os-username
--os-password
--os-tenant-name
--os-auth-url
</code></pre>
<p>For example, the following is how you would list Nova instances while authenticating as the user <code>bcwaldon</code> on the tenant <code>devs</code> with the password <code>snarf</code> against the authentication endpoint <code>http://auth.example.com:5000/v2.0</code>:</p>
<pre><code>nova --os-username bcwaldon --os-password snarf --os-tenant-name devs \ 
     --os-auth-url http://auth.example.com:5000/v2.0 list
</code></pre>
<p>Alternatively, the OpenStack clients offer the same configuration through environment variables:</p>
<pre><code>export OS_USERNAME=bcwaldon
export OS_PASSWORD=snarf
export OS_TENANT_NAME=devs
expot OS_AUTH_URL=http://auth.example.com:5000/v2.0
nova list
</code></pre>
<h3 id="discovering-commands">Discovering Commands</h3>
<p>New features and commands are added to the client projects just about as quickly as the upstream core project development happens, so it is suggested that you </p>
<p>Each of the openstack client projects have a <code>help</code> command that will print a list of available commands:</p>
<pre><code>% cinder help
usage: cinder [--version] [--debug] [--os-username &lt;auth-user-name&gt;]
              [--os-password &lt;auth-password&gt;]
              [--os-tenant-name &lt;auth-tenant-name&gt;]
              [--os-tenant-id &lt;auth-tenant-id&gt;] [--os-auth-url &lt;auth-url&gt;]
              [--os-region-name &lt;region-name&gt;] [--service-type &lt;service-type&gt;]
              [--service-name &lt;service-name&gt;]
              [--volume-service-name &lt;volume-service-name&gt;]
              [--endpoint-type &lt;endpoint-type&gt;]
              [--os-volume-api-version &lt;compute-api-ver&gt;]
              [--os-cacert &lt;ca-certificate&gt;] [--retries &lt;retries&gt;]
              &lt;subcommand&gt; ...

Command-line interface to the OpenStack Cinder API.

Positional arguments:
  &lt;subcommand&gt;
    absolute-limits     Print a list of absolute limits for a user
    backup-create       Creates a backup.
    backup-delete       Remove a backup.
    backup-list         List all the backups.
    backup-restore      Restore a backup.
    backup-show         Show details about a backup.
    create              Add a new volume.
    credentials         Show user credentials returned from auth
    delete              Remove a volume.
    ...

Optional arguments:
  --version             show program's version number and exit
  --debug               Print debugging output
  --os-username &lt;auth-user-name&gt;
                        Defaults to env[OS_USERNAME].
  ...
</code></pre>

<p>Each <code>help</code> command optionally takes an argument:</p>
<pre><code>% cinder help create
usage: cinder create [--snapshot-id &lt;snapshot-id&gt;]
                     [--source-volid &lt;source-volid&gt;] [--image-id &lt;image-id&gt;]
                     [--display-name &lt;display-name&gt;]
                     [--display-description &lt;display-description&gt;]
                     [--volume-type &lt;volume-type&gt;]
                     [--availability-zone &lt;availability-zone&gt;]
                     [--metadata [&lt;key=value&gt; [&lt;key=value&gt; ...]]]
                     &lt;size&gt;

Add a new volume.

Positional arguments:
  &lt;size&gt;                Size of volume in GB

Optional arguments:
  --snapshot-id &lt;snapshot-id&gt;
                        Create volume from snapshot id (Optional,
                        Default=None)
  --source-volid &lt;source-volid&gt;
                        Create volume from volume id (Optional, Default=None)
  --image-id &lt;image-id&gt;
                        Create volume from image id (Optional, Default=None)
  --display-name &lt;display-name&gt;
                        Volume name (Optional, Default=None)
  --display-description &lt;display-description&gt;
                        Volume description (Optional, Default=None)
  --volume-type &lt;volume-type&gt;
                        Volume type (Optional, Default=None)
  --availability-zone &lt;availability-zone&gt;
                        Availability zone for volume (Optional, Default=None)
  --metadata [&lt;key=value&gt; [&lt;key=value&gt; ...]]
                        Metadata key=value pairs (Optional, Default=None)
</code></pre>

<h2 id="troubleshooting">Troubleshooting</h2>
<p>If you installed the clients using <code>pip</code>, the best thing to do when you feel like your clients are 'broken' is to destroy your virtual environment and reinstall.</p>
<p>If this doesn't solve your problem, you're unfortunately at the point that you need to use your search of engine of choice to find help, start debugging Python code or file a bug on Launchpad.</p>]]></content:encoded>
    </item>
    <item>
      <title>OpenStack Clients on Windows</title>
      <link>http://hackstack.org/x/blog/2013/06/20/openstack-clients-on-windows</link>
      <pubDate>Thu, 20 Jun 2013 06:20:00 CDT</pubDate>
      <category><![CDATA[windows]]></category>
      <category><![CDATA[openstack]]></category>
      <guid isPermaLink="false">tHupsn4nGXCM7HWbUppBLGAtIYw=</guid>
      <description>OpenStack Clients on Windows</description>
      <content:encoded><![CDATA[<div class="document">
<p>OpenStack command line clients are a pile of Python modules and dependencies and can be a real joy to install.  On Linux there are often vendor-maintained packages available to simplify the task and capture all of the dependencies, while on Windows it is a completely different story as no version of Windows includes any version of Python out of the box.</p>
<p>There are three layers to the Python stack to get the OpenStack clients (or any Python app really) installed and working on Windows: a Python interpreter/runtime, the Python modules that provide an interface to PyPI, and the client libraries and their dependencies.  Actually, all platforms have all of these layers but only Windows doesn't include any of them in the default installation so everything from the ground up needs to be installed.  And there is more than one way to do it. <a class="footnote-reference" href="#id3" id="id1">[1]</a></p>
<p>The OpenStack client libraries are officially supported on Python 2.6 and 2.7.  While not yet complete, work is underway to support Python 3, the installation of which is left as an exercise for the reader.  (Hint: It's not too different from the below.)</p>
<p><strong>Python Runtime</strong></p>
<p>Contrary to <a class="reference external" href="http://www.python.org/dev/peps/pep-0020/">PEP 20</a> (The Zen of Python) <a class="footnote-reference" href="#id4" id="id2">[2]</a> there is not one obvious way to install a Python interpreter on Windows.  Of course, each Python release includes official Python binaries for Windows at python.org, but the <a class="reference external" href="http://www.python.org/getit/windows/">Windows releases</a> page lists some of the other Python runtime packages that are available, each with their own particular set of advantages.  One additional that will be familiar to UNIX users is the <a class="reference external" href="http://www.cygwin.com/">Cygwin</a> Python port; once Cygwin's Python interpreter is installed the rest is very similar to the steps here.</p>
<p>This guide installs the official 32 bit 2.7.5 runtime on Windows 7.  It also works on XP and presumably Vista although that remains untested for some reason.   The Python runtime can be installed anywhere, the default is <tt class="docutils literal"><span class="pre">C:\Python27</span></tt>.
If you change it remember to make the corresponding change in the rest of this guide.  Also, be aware that putting it in certain places, such as <tt class="docutils literal">Program files</tt>, will cause Windows UAC (Vista and newer) to require an administrative token to perform module installs.  While not impossible to deal with, this is beyond the scope of this guide for now.</p>
<ul class="simple">
<li>Download and install the <a class="reference external" href="http://www.python.org/ftp/python/2.7.5/python-2.7.5.msi">Windows runtime installer</a></li>
</ul>
<blockquote>
<ul class="simple">
<li><strong>Select whether to install Python for all users of this computer</strong>: Select 'Install for all users'</li>
<li><strong>Select Destination Directory</strong>: Accept the default Destination Directory <tt class="docutils literal"><span class="pre">C:\Python27\</span></tt>.</li>
<li><strong>Customize Python</strong>: The default selections are fine.  At a minimum the
<strong>Register Extensions</strong> and <strong>Utility Scripts</strong> selections should be enabled.</li>
</ul>
</blockquote>
<ul class="simple">
<li>Add the destination directory to the System PATH via Control Panel<ul>
<li>On Windows XP: <strong>Control Panel → System → Advanced → Environment Variables</strong></li>
<li>On Windows 7: <strong>Control Panel → System and Security → System → Advanced system settings → Environment Variables</strong></li>
<li>Edit the Path entry in the <strong>System variables</strong> list</li>
<li>Add the Python installation path and the Python scripts directory to the beginning of the Path variable, being careful to not remove the existing value: <tt class="docutils literal"><span class="pre">C:\Python27;C:\Python27\Scripts;</span></tt></li>
</ul>
</li>
</ul>
<p>Open a command prompt window and test the Python installation:</p>
<pre class="literal-block">
Microsoft Windows [Version 6.1.7601]
Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

C:\Users\dtroyer&gt;python
Python 2.7.5 (default, May 15 2013, 22:43:36) [MSC v.1500 32 bit (Intel)] on win32
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt;
</pre>
<p><strong>Additional Python Modules</strong></p>
<p>In addition to the base Python runtime some additional modules are required to
bootstrap an environment for the OpenStack client install.  The <tt class="docutils literal">setuptools</tt>
module contains the <tt class="docutils literal">easy_install</tt> command that we use to install <tt class="docutils literal">pip</tt> which
is itself used to install additional modules and their dependencies from PyPI.</p>
<ul>
<li><p class="first">Install <a class="reference external" href="https://pypi.python.org/pypi/setuptools/0.7.4">setuptools</a> using the <a class="reference external" href="https://bitbucket.org/pypa/setuptools/raw/0.7.4/ez_setup.py">ez_setup.py</a> script:</p>
<pre class="literal-block">
python ez_setup.py
</pre>
</li>
</ul>
<ul>
<li><p class="first">Install <tt class="docutils literal">pip</tt>:</p>
<pre class="literal-block">
easy_install pip
</pre>
</li>
</ul>
<p>Some common Python modules are not pure Python and require a C compiler to install
from PyPI.  Fortunately
many of these packages also have Windows binary installers that can be used with
the official Python runtime.</p>
<p>OpenStack's Glance client requires pyOpenSSL which is one of these hybrid packages.
It can be installed from PyPI directly using the supplied binary Windows installer.</p>
<ul class="simple">
<li>Download and install the <a class="reference external" href="https://pypi.python.org/packages/2.7/p/pyOpenSSL/pyOpenSSL-0.13.winxp32-py2.7.msi">pyOpenSSL installer</a><ul>
<li><strong>Select whether to install Python for all users of this computer</strong>: Select 'Install for all users'</li>
<li><strong>Select Python Installations</strong>: The default Python installation should be the one installed above.  Use it.</li>
</ul>
</li>
</ul>
<p><strong>OpenStack Client Libraries</strong></p>
<p>The OpenStack command line clients are included with the Python API libraries.
They are released to PyPI independently of the periodic OpenStack releases
and are backward compatible with older OpenStack releases so it should always
be safe to upgrade the clients.  So even if you are using a Folsom-era
OpenStack installation the current client libraries are going to work.</p>
<ul>
<li><p class="first">Install the client libraries from PyPI:</p>
<pre class="literal-block">
pip install python-keystoneclient python-novaclient python-cinderclient \
  python-glanceclient python-swiftclient
</pre>
</li>
</ul>
<hr class="docutils" />
<table class="docutils footnote" frame="void" id="id3" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td>Yeah, my Perl is showing...</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id4" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id2">[2]</a></td><td><tt class="docutils literal">python <span class="pre">-c</span> &quot;import this&quot;</tt></td></tr>
</tbody>
</table>
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>
