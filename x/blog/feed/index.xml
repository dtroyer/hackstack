<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>HackStack Posts</title>
    <link>http://hackstack.org/x/blog</link>
    <description>OpenStack and other hackish things</description>
    <pubDate>Tue, 17 Sep 2013 17:00:03 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>DevStack Local Config</title>
      <link>http://hackstack.org/x/blog/2013/09/07/devstack-local-config</link>
      <pubDate>Sat, 07 Sep 2013 09:17:00 CDT</pubDate>
      <category><![CDATA[openstack]]></category>
      <category><![CDATA[devstack]]></category>
      <guid isPermaLink="false">XPq24BFbobrSwXVdJ6QBSd1zKF8=</guid>
      <description>DevStack Local Config</description>
      <content:encoded><![CDATA[<div class="document">
<p>DevStack has long had an extremely simple mechanism to add arbitrary configuration entries to nova.con, <tt class="docutils literal">EXTRA_OPTS</tt>.  It was handy and even emulated in the Neutron configuration in a number of places.  However, it did not scale well: a new variable and expansion loop is required for each file/section combination.  And now the time has come for a replacement...</p>
<div class="section" id="requirements">
<h1>Requirements</h1>
<blockquote>
<ul class="simple">
<li><tt class="docutils literal">localrc</tt> has served well in its capacity of the sole container of local configuration.  Being a single file makes it easy to track and share known working DevStack configurations.  Any new configuration scheme must at least attempt to preserve this property.</li>
<li>In order to be able to set configuration attributes in arbitrary files and sections, those bits of information must be encoded in the new format.</li>
<li>There must be a mechanism to selectively merge the configuration values into their destination files rather than do them all at once.</li>
<li>Reduce the number of configuration variables in general that are simply passed-through to project config files.  They are being set in localrc anyway, moving that to another section of local.conf is not a difficult transition.</li>
</ul>
</blockquote>
</div>
<div class="section" id="solution">
<h1>Solution</h1>
<p>A new master local configuration file is supported (but like <tt class="docutils literal">localrc</tt> is not included in the DevStack repo) that all local configuration for DevStack, including the master copy of <tt class="docutils literal">localrc</tt>.  <tt class="docutils literal">local.conf</tt> is an extended-INI format that introduces a new meta-section header that contains the additional required information: a group name and destination configuration filename.  It has the form:</p>
<pre class="literal-block">
[[ &lt;group&gt; | &lt;filename&gt; ]]
</pre>
<p>where &lt;group&gt; is the usual DevStack project name (<tt class="docutils literal">nova</tt>, <tt class="docutils literal">cinder</tt>, etc) and &lt;filename&gt; is the config filename.  The filename is eval'ed in the <tt class="docutils literal">stack.sh</tt> context so all environment variables are available and may be used (see example below).  Using the project config file variables in the header is strongly suggested (see example of NOVA_CONF below).</p>
<p>The file is processed strictly in sequence; meta-sections may be specified more than once but if any settings are duplicated the last to appear in the file will be used:</p>
<pre class="literal-block">
[[nova|$NOVA_CONF]]
[DEFAULT]
use_syslog = True

[osapi_v3]
enabled = False
</pre>
<p>A specific meta-section <tt class="docutils literal">[[local:localrc]]</tt> is used to provide the default <tt class="docutils literal">localrc</tt> file.  This allows all custom settings for DevStack to be contained in a single file.  <tt class="docutils literal">localrc</tt> is not overwritten if it exists to preserve compatability:</p>
<pre class="literal-block">
[[local|localrc]]
FIXED_RANGE=10.254.1.0/24
ADMIN_PASSWORD=speciale
LOGFILE=$DEST/logs/stack.sh.log
</pre>
</div>
<div class="section" id="implementation">
<h1>Implementation</h1>
<p>Four new functions were added to parse and merge <tt class="docutils literal">local.conf</tt> into the existing INI-style config files.  The base <tt class="docutils literal">functions</tt> file is getting way too large so these functions are in <tt class="docutils literal">lib/config</tt> which will only contain functions related to config file manipulation.  There shall also be no side-effects from any of these functions.  The existing <tt class="docutils literal">iniXXX()</tt> functions may also eventually move here.</p>
<blockquote>
<ul class="simple">
<li><tt class="docutils literal">get_meta_section()</tt> - Returns an INI fragment for a specific group/filename combination</li>
<li><tt class="docutils literal">get_meta_section_files()</tt> - Returns a list of the config filenames present in <tt class="docutils literal">local.conf</tt> for a specific group</li>
<li><tt class="docutils literal">merge_config_file()</tt> - Performs the actual merge of the INI fragment from <tt class="docutils literal">local.conf</tt></li>
<li><tt class="docutils literal">merge_config_group()</tt> - Loops over the INI fragments present for the specified group and merges them</li>
</ul>
</blockquote>
<p>The merge is performed after the <tt class="docutils literal">install_XXX()</tt> and <tt class="docutils literal">configure_XXX()</tt> functions for all layer 1 and 2 projects are complete and before any services are started.</p>
</div>
<div class="section" id="use-it-or-lose-it">
<h1>Use It Or Lose It</h1>
<p>The list of existing variables that will be deprecated in favor of using <tt class="docutils literal">local.conf</tt> has not been completed yet but includes <tt class="docutils literal">EXTRA_OPTS</tt> and a handful of <tt class="docutils literal">Q_XXX_XXX_OPTS</tt> variables in Neutron.  These are listed at the end of <tt class="docutils literal">stack.sh</tt> runs as deprecated and will be removed sometime in the Icehouse development cycle after DevStack's stable/havana branch is in place and Grenade's Grizzly-&gt;Havana upgrade is operational.</p>
<div class="section" id="examples">
<h2>Examples</h2>
<ul>
<li><p class="first">Convert EXTRA_OPTS from:</p>
<pre class="literal-block">
EXTRA_OPTS=api_rate_limit=False

to

[[nova|$NOVA_CONF]]
[DEFAULT]
api_rate_limit = False
</pre>
</li>
<li><p class="first">Eliminate a Cinder pass-through (<tt class="docutils literal">CINDER_PERIODIC_INTERVAL</tt>):</p>
<pre class="literal-block">
[[cinder|$CINDER_CONF]]
[DEFAULT]
periodic_interval = 60
</pre>
</li>
<li><p class="first">Change a setting that has no variable:</p>
<pre class="literal-block">
[[cinder|$CINDER_CONF]]
[DEFAULT]
iscsi_helper = new-tgtadm
</pre>
</li>
<li><p class="first">Basic complete config:</p>
<pre class="literal-block">
[[nova|$NOVA_CONF]]
[DEFAULT]
api_rate_limit = False

[vmware]
host_ip = $HOST_IP
host_username = root
host_password = deepdarkunknownsecret


[[cinder|$CINDER_CONF]]
[DEFAULT]
periodic_interval = 60

vmware_host_ip = $HOST_IP
vmware_host_username = root
vmware_host_password = deepdarkunknownsecret


[[local|localrc]]
FIXED_RANGE=10.254.1.0/24
NETWORK_GATEWAY=10.254.1.1
LOGDAYS=1
LOGFILE=$DEST/logs/stack.sh.log
SCREEN_LOGDIR=$DEST/logs/screen
ADMIN_PASSWORD=quiet
DATABASE_PASSWORD=$ADMIN_PASSWORD
RABBIT_PASSWORD=$ADMIN_PASSWORD
</pre>
</li>
</ul>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>OpenStack - Seven Layer Dip as a Service</title>
      <link>http://hackstack.org/x/blog/2013/09/05/openstack-seven-layer-dip-as-a-service</link>
      <pubDate>Thu, 05 Sep 2013 09:05:00 CDT</pubDate>
      <category><![CDATA[openstack]]></category>
      <category><![CDATA[rant]]></category>
      <guid isPermaLink="false">n_L3VOh8Wa6r8DsnH3_0f0RV7GE=</guid>
      <description>OpenStack - Seven Layer Dip as a Service</description>
      <content:encoded><![CDATA[<div class="document">
<p>OpenStack is, as it name implies, a stack of services to provide &quot;components for a cloud infrastructure solution&quot;. <a class="footnote-reference" href="#id2" id="id1">[1]</a>  There are layers of services, some interdependent on each other, some only dependent on the layers below it.</p>
<p>For some time there has been a PC dance around 'labelling' projects that may or may not be at a layer that it wants to be in.  Back in the day, the term 'core' was thrown around to identify the services necessary to build an OpenStack deployment.  That term has been so misused and coopted and stomped on as to become unusable for technical discussions.  The OpenStack Foundation Board has an effort ongoing to define what 'core' means but they are focused on who and what is required in a deployment in order to use the trademarked OpenStack[tm] name and logo and not any determination as to layering of projects.  Go team, but that is not what we in the coding trenches need.</p>
<p>'Integrated' has become the term-du-jour for the TC to identify those projects that are part of the announced OpenStack release a the end of the development cycle.  That clearly identifies those projects that are administratively included but has no meaning for technical relationship/interface considerations.</p>
<p>For the sake of argument I am going to co-opt another term, stealing it directly from OSI networking terminology: 'layer'.  Layer is used there to describe the boundaries and interfaces between the functional components.  In OpenStack, the layers we have are the base infrastructure required to make something work, the additional services to make things integrate well with its surroundings and the services provided to the system and its users.  Really general terms there.</p>
<div class="section" id="layer-definitions">
<h1>Layer Definitions</h1>
<div class="section" id="layer-0-operating-systems-and-libraries">
<h2>Layer 0: Operating Systems and Libraries</h2>
<p>[Because Real Programmers start with zero, right?]</p>
<p>OpenStack is built on top of the existing projects and technology that do the grunt work.  For completeness we will include the underlying components in Layer 0 even though these pieces are not part of OpenStack proper.</p>
<p>There are also a number of libraries specific to OpenStack (even though some may be useful elsewhere) that the other projects are dependent on but are not themselves operational services.  Most of these are encapsulated in the Oslo project.</p>
</div>
<div class="section" id="layer-1-the-basics">
<h2>Layer 1: The Basics</h2>
<p>The OpenStack stack begins with the Infrastructure as a Service.  This is the layer that everything else builds on.  This is also the focus of three of the four early OpenStack projects, once called 'core projects'.  But we've thrown out that c-word so now let's agree that this is simply 'OpenStack Layer 1'.  These are the interdependent services that form a minimal operational system and have no other OpenStack dependencies.</p>
<blockquote>
<ul class="simple">
<li>Identity (Keystone)</li>
<li>Image (Glance)</li>
<li>Compute (Nova)</li>
</ul>
</blockquote>
<p>Thats it.  Really.  At least until Nova Networking is removed and Network (Neutron) moves in to this layer as a required service for every deployment.</p>
<p>While this is contrary to what the board is saying regarding the definition of 'core', they are talking about user experience and legal definitions where I am talking about technical and architectural relationships.</p>
<p>Since Essex, most OpenStack services rely on Keystone to provide Identity services; Swift still is able to be deployed in a stand-alone configuration.  Nova requires Glance to supply bootable images.  Glance is able to use Swift if it is available and must be specifically configured to do so..  Similarly, Nova is able to use Cinder and Neutron if they are available and must also be configured to use them.</p>
</div>
<div class="section" id="layer-2-extending-the-base">
<h2>Layer 2: Extending the Base</h2>
<p>Layer 2 services have the characteristic that they only depend on the services in Layer 1 and that Layer 1 services may be configured to use Layer 2 servies if available.  Nearly all deployments will include at least some of these services.</p>
<blockquote>
<ul class="simple">
<li>Network (Neutron)</li>
<li>Volume (Cinder)</li>
<li>Object (Swift)</li>
<li>Bare-metal (Ironic) - status: in incubation</li>
</ul>
</blockquote>
<p>Neutron will eventually become a Layer 1 service when Nova Networking is removed.</p>
<p>Ironic technically sits below Nova but is optional so it is in Layer 2.</p>
</div>
<div class="section" id="layer-3-the-options">
<h2>Layer 3: The Options</h2>
<p>Layer 3 services are optional from a functional point of view but valuable in deployments that integrate with the world around them.  They integrate with Layer 1 and 2 services and are dependent on them for operation.</p>
<blockquote>
<ul class="simple">
<li>Web UI (Horizon)</li>
<li>Notification (Ceilometer)</li>
</ul>
</blockquote>
</div>
<div class="section" id="layer-4-turtles-all-the-way-up">
<h2>Layer 4: Turtles All The Way Up</h2>
<p>Layer 4 catches everything else with an OpenStack sticker on the box.  This includes the rest of the XXaaS services and everything that is purely user facing, i.e. the OpenStack deployment itself does not depend on the service, it is only used by customers of cloud services.</p>
<blockquote>
<ul class="simple">
<li>Orchestration (Heat)</li>
<li>DBaaS (Trove) - status: to be integrated in Icehouse</li>
<li>DNSaaS (Moniker) - status: applying for incubation</li>
<li>MQaaS (Marconi) - status: in incubation</li>
</ul>
</blockquote>
</div>
</div>
<div class="section" id="relationships">
<h1>Relationships</h1>
<p>What does all this mean?  Probably not much outside of the following projects.  Really it is just a framework for terminology to describe and categorize projects by their purely technical relationships.</p>
<div class="section" id="devstack">
<h2>DevStack</h2>
<p>DevStack has struggled to keep from overgrowing its playpen and contain the effects of everyone with a project to pitch wanting to get it included.  Some basic hooks have been added to <tt class="docutils literal">stack.sh</tt> to allow projects not explicitly supported in the DevStack repo to be included in <tt class="docutils literal">stack</tt>/<tt class="docutils literal">unstack</tt> operations.  More hooks are coming in the near future as <tt class="docutils literal">stack.sh</tt> continues to get streamlined and make the projects follow a common template for installation/configuration/startup/etc.</p>
<p>DevStack's goal is to (soon!) clearly define the layers of services so developers can focus on the layers they care about and still have the ability to build the whole she-bang.  The DevStack layer scripts will also be hookable to allow additional (non-Integrated? non-Incubated?) projects the ability to self-integrate into DevStack without being in the repo.</p>
<p>The layered approach will be to install and configure the layers in order, with the exception that Layer 1 startup will be delayed until Layer 2 configuration is complete to allow the configuration changes to take effect.</p>
</div>
<div class="section" id="grenade">
<h2>Grenade</h2>
<p>Grenade only performs upgrade runs on Layer 1 and 2 services at the most, even then not including (yet?) all Layer 2 services.  Additional layers can only be added once a project is part of the DevStack stable release used as the Grenade <tt class="docutils literal">base</tt> release.</p>
</div>
<div class="section" id="openstackclient">
<h2>OpenStackClient</h2>
<p>OSC is not an official OpenStack project or program despite its existence in the OpenStack namespace on GitHub as it began before those concepts were fully-formed.  So in some regards it is not bound to the rules and conventions that apply to the other projects.  However, to do otherwise would be foolish.</p>
<p>OSC uses the Layers in determining the priorities for implementation of client commands.  It currently has implementations for Identity, Image, Volume and Compute APIs with plans for Object and Network to come.  It does have a simple plug-in capability that allows additional modules to be added independently without being part of the OSC repo.</p>
</div>
</div>
<div class="section" id="epilogue">
<h1>Epilogue</h1>
<p>[Quinn Martin Productions TV shows always had these, remember? Anyone?]</p>
<p>Other projects may or may not pick up this terminology, it depends on if it turns out to be useful to them.  There is a technical hierarchy of projects even if not everyone wants to acknowledge it, and the need for avoiding the existing hot-button terms seems to be increasing.</p>
<hr class="docutils" />
<table class="docutils footnote" frame="void" id="id2" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td>Stolen directly from <a class="reference external" href="http://www.openstack.org/">openstack.org</a></td></tr>
</tbody>
</table>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>OpenStack Clients on Windows</title>
      <link>http://hackstack.org/x/blog/2013/06/20/openstack-clients-on-windows</link>
      <pubDate>Thu, 20 Jun 2013 06:20:00 CDT</pubDate>
      <category><![CDATA[windows]]></category>
      <category><![CDATA[openstack]]></category>
      <guid isPermaLink="false">tHupsn4nGXCM7HWbUppBLGAtIYw=</guid>
      <description>OpenStack Clients on Windows</description>
      <content:encoded><![CDATA[<div class="document">
<p>OpenStack command line clients are a pile of Python modules and dependencies and can be a real joy to install.  On Linux there are often vendor-maintained packages available to simplify the task and capture all of the dependencies, while on Windows it is a completely different story as no version of Windows includes any version of Python out of the box.</p>
<p>There are three layers to the Python stack to get the OpenStack clients (or any Python app really) installed and working on Windows: a Python interpreter/runtime, the Python modules that provide an interface to PyPI, and the client libraries and their dependencies.  Actually, all platforms have all of these layers but only Windows doesn't include any of them in the default installation so everything from the ground up needs to be installed.  And there is more than one way to do it. <a class="footnote-reference" href="#id3" id="id1">[1]</a></p>
<p>The OpenStack client libraries are officially supported on Python 2.6 and 2.7.  While not yet complete, work is underway to support Python 3, the installation of which is left as an exercise for the reader.  (Hint: It's not too different from the below.)</p>
<p><strong>Python Runtime</strong></p>
<p>Contrary to <a class="reference external" href="http://www.python.org/dev/peps/pep-0020/">PEP 20</a> (The Zen of Python) <a class="footnote-reference" href="#id4" id="id2">[2]</a> there is not one obvious way to install a Python interpreter on Windows.  Of course, each Python release includes official Python binaries for Windows at python.org, but the <a class="reference external" href="http://www.python.org/getit/windows/">Windows releases</a> page lists some of the other Python runtime packages that are available, each with their own particular set of advantages.  One additional that will be familiar to UNIX users is the <a class="reference external" href="http://www.cygwin.com/">Cygwin</a> Python port; once Cygwin's Python interpreter is installed the rest is very similar to the steps here.</p>
<p>This guide installs the official 32 bit 2.7.5 runtime on Windows 7.  It also works on XP and presumably Vista although that remains untested for some reason.   The Python runtime can be installed anywhere, the default is <tt class="docutils literal"><span class="pre">C:\Python27</span></tt>.
If you change it remember to make the corresponding change in the rest of this guide.  Also, be aware that putting it in certain places, such as <tt class="docutils literal">Program files</tt>, will cause Windows UAC (Vista and newer) to require an administrative token to perform module installs.  While not impossible to deal with, this is beyond the scope of this guide for now.</p>
<ul class="simple">
<li>Download and install the <a class="reference external" href="http://www.python.org/ftp/python/2.7.5/python-2.7.5.msi">Windows runtime installer</a></li>
</ul>
<blockquote>
<ul class="simple">
<li><strong>Select whether to install Python for all users of this computer</strong>: Select 'Install for all users'</li>
<li><strong>Select Destination Directory</strong>: Accept the default Destination Directory <tt class="docutils literal"><span class="pre">C:\Python27\</span></tt>.</li>
<li><strong>Customize Python</strong>: The default selections are fine.  At a minimum the
<strong>Register Extensions</strong> and <strong>Utility Scripts</strong> selections should be enabled.</li>
</ul>
</blockquote>
<ul class="simple">
<li>Add the destination directory to the System PATH via Control Panel<ul>
<li>On Windows XP: <strong>Control Panel → System → Advanced → Environment Variables</strong></li>
<li>On Windows 7: <strong>Control Panel → System and Security → System → Advanced system settings → Environment Variables</strong></li>
<li>Edit the Path entry in the <strong>System variables</strong> list</li>
<li>Add the Python installation path and the Python scripts directory to the beginning of the Path variable, being careful to not remove the existing value: <tt class="docutils literal"><span class="pre">C:\Python27;C:\Python27\Scripts;</span></tt></li>
</ul>
</li>
</ul>
<p>Open a command prompt window and test the Python installation:</p>
<pre class="literal-block">
Microsoft Windows [Version 6.1.7601]
Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

C:\Users\dtroyer&gt;python
Python 2.7.5 (default, May 15 2013, 22:43:36) [MSC v.1500 32 bit (Intel)] on win32
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt;
</pre>
<p><strong>Additional Python Modules</strong></p>
<p>In addition to the base Python runtime some additional modules are required to
bootstrap an environment for the OpenStack client install.  The <tt class="docutils literal">setuptools</tt>
module contains the <tt class="docutils literal">easy_install</tt> command that we use to install <tt class="docutils literal">pip</tt> which
is itself used to install additional modules and their dependencies from PyPI.</p>
<ul>
<li><p class="first">Install <a class="reference external" href="https://pypi.python.org/pypi/setuptools/0.7.4">setuptools</a> using the <a class="reference external" href="https://bitbucket.org/pypa/setuptools/raw/0.7.4/ez_setup.py">ez_setup.py</a> script:</p>
<pre class="literal-block">
python ez_setup.py
</pre>
</li>
</ul>
<ul>
<li><p class="first">Install <tt class="docutils literal">pip</tt>:</p>
<pre class="literal-block">
easy_install pip
</pre>
</li>
</ul>
<p>Some common Python modules are not pure Python and require a C compiler to install
from PyPI.  Fortunately
many of these packages also have Windows binary installers that can be used with
the official Python runtime.</p>
<p>OpenStack's Glance client requires pyOpenSSL which is one of these hybrid packages.
It can be installed from PyPI directly using the supplied binary Windows installer.</p>
<ul class="simple">
<li>Download and install the <a class="reference external" href="https://pypi.python.org/packages/2.7/p/pyOpenSSL/pyOpenSSL-0.13.winxp32-py2.7.msi">pyOpenSSL installer</a><ul>
<li><strong>Select whether to install Python for all users of this computer</strong>: Select 'Install for all users'</li>
<li><strong>Select Python Installations</strong>: The default Python installation should be the one installed above.  Use it.</li>
</ul>
</li>
</ul>
<p><strong>OpenStack Client Libraries</strong></p>
<p>The OpenStack command line clients are included with the Python API libraries.
They are released to PyPI independently of the periodic OpenStack releases
and are backward compatible with older OpenStack releases so it should always
be safe to upgrade the clients.  So even if you are using a Folsom-era
OpenStack installation the current client libraries are going to work.</p>
<ul>
<li><p class="first">Install the client libraries from PyPI:</p>
<pre class="literal-block">
pip install python-keystoneclient python-novaclient python-cinderclient \
  python-glanceclient python-swiftclient
</pre>
</li>
</ul>
<hr class="docutils" />
<table class="docutils footnote" frame="void" id="id3" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td>Yeah, my Perl is showing...</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id4" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id2">[2]</a></td><td><tt class="docutils literal">python <span class="pre">-c</span> &quot;import this&quot;</tt></td></tr>
</tbody>
</table>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>OpenStack Clients</title>
      <link>http://hackstack.org/x/blog/2013/06/20/openstack-clients</link>
      <pubDate>Thu, 20 Jun 2013 06:20:00 CDT</pubDate>
      <category><![CDATA[windows]]></category>
      <category><![CDATA[openstack]]></category>
      <guid isPermaLink="false">ORQg9UezE3vW3Fmm8VvDLdWq53E=</guid>
      <description>OpenStack Clients</description>
      <content:encoded><![CDATA[<h2 id="openstack-client-projects">OpenStack Client Projects</h2>
<p>The developers of OpenStack maintain a series of <a href="https://wiki.openstack.org/wiki/ProjectTypes">library projects</a> which are the Python interfaces to the OpenStack REST APIs and also include command-line clients:</p>
<ul>
<li><a href="http://launchpad.net/python-ceilometerclient">python-ceilometerclient</a></li>
<li><a href="http://launchpad.net/python-cinderclient">python-cinderclient</a></li>
<li><a href="http://launchpad.net/python-glanceclient">python-glanceclient</a></li>
<li><a href="http://launchpad.net/python-heatclient">python-heatclient</a></li>
<li><a href="http://launchpad.net/python-keystoneclient">python-keystoneclient</a></li>
<li><a href="http://launchpad.net/python-novaclient">python-novaclient</a></li>
<li><a href="http://launchpad.net/python-quantumclient">python-quantumclient</a></li>
<li><a href="http://launchpad.net/python-swiftclient">python-swiftclient</a></li>
</ul>
<p>Each project is managed through the same development process as the integrated OpenStack projects so you can expect to find the latest source on <a href="http://github.com/openstack">GitHub</a>. The master branch in the project repositories should theoretically never be 'broken,' but realistically they are not tested between releases with the same vigor as the core projects. The bug and feature tracking happens on Launchpad; each of the projects above are linked to their respective Launchpad projects.</p>
<p>The client libraries are simply REST (HTTP) API clients and are backward compatible with the core supported API versions. For example, <code>python-novaclient</code> works with any version of Nova that supports matching API versions.  The client projects are versioned and released to PyPI independently of the integrated OpenStack releases.  There is no 'Grizzly' version of <code>python-novaclient</code>, for example, but any <code>python-novaclient</code> released after Grizzly's release will be compatible as long as the same API versions are enabled.</p>
<h2 id="installing-the-clients">Installing the Clients</h2>
<p>Official releases of the clients are distributed by developers through <a href="http://pypi.python.org">PyPi</a>.  Some Linux distributions also package the clients in their native format (RPM, APT, etc).  As the client projects are still evolving quite rapidly, the packages distributed by the distributions can fall out of date.  However, the client packages distributed with Grizzly server packages will be known to be compatible with Grizzly.</p>
<p>Users who want to be curent or are working with OpenStack development releases will want to install the clients from PyPi. As there are drawbacks to using PyPi both methods will be covered here.</p>
<p>Most of the installation steps here require administrative privileges.  Python virtual environments (virtualenvs) can be used to work around this if necessary, in addition to their other benefits (see below).</p>
<h3 id="python-runtime">Python Runtime</h3>
<p>OpenStack command line clients consist of a set of Python modules and their dependencies. There are three layers to the Python stack: a Python runtime, the Python modules that provide an interface to PyPI and the client library modules and their dependencies.  All supported platforms (Linux, OS X and Windows) have all of these layers but only Windows doesn't include any of them in the box so everything from the ground up needs to be installed.  And there is more than one way to do it.</p>
<p>The OpenStack client libraries are officially supported on Python 2.6 and 2.7.  While Python 3 is also available for all of these platforms, the work to support it in the clients is underway but not yet complete.</p>
<h4 id="linux-installation">Linux Installation</h4>
<p>Linux distributions usually include Python installed by default.  While all recent releases are Python 2.6 or 2.7, some long-term-support distributions may still contain Python 2.5 or older and require a newer Python runtime.  For example, <a href="https://wiki.openstack.org/wiki/NovaInstall/CentOSNotes#CentOS_5.2F_RHEL_5_.2F_Oracle_Enterprise_Linux_5">the OpenStack wiki</a> documents installing Nova on RHEL 5 and friends.  From that document the steps to enable the EPEL repo and install Python 2.6 are sufficient to support installing the client libraries.</p>
<h4 id="os-x-installation">OS X Installation</h4>
<p>All OS X releases since 10.6 (Snow Leopard) include a supported Python runtime although it is usually a few minor versions behind the current release.  Alternatives are available to install current versions of Python but are out of scope here.</p>
<p>OS X 10.5 (Leopard) includes Python 2.5.1 and needs to have particular considerations addressed in order to update it.  See the <a href="http://wiki.python.org/moin/MacPython/Leopard">Leopard wiki page</a> for more information.<br />
</p>
<h4 id="windows-installation">Windows Installation</h4>
<p>Windows has a couple of options for Python installations.  Each Python release includes official Python binaries for both 32-bit and 64-bit Windows. The python.org <a href="http://www.python.org/getit/windows/">Windows releases</a> page lists some of the other Python runtime packages that are available.  One additional that will be familiar to UNIX users living in a Windows world is the <a href="http://www.cygwin.com/">Cygwin</a> Python port. Once Cygwin's Python interpreter is installed the rest is very similar to the steps here.</p>
<p>This guide will use the official 32 bit 2.7.5 runtime on Windows 7 as the example installation but it also works on XP and Vista.  The Python interpreter can be installed anywhere, the default folder is <code>C:\Python27</code>.  If you change it remember to make the corresponding change in the rest of this guide.  Also, be aware that putting it in certain places, such as <code>Program files</code>, will cause Windows UAC in Vista and newer to require an administrative token to perform module installs.  While not impossible to deal with, this is currently beyond the scope of this guide.</p>
<ul>
<li>
<p>Download and install the <a href="http://www.python.org/ftp/python/2.7.5/python-2.7.5.msi">Windows runtime installer</a>:</p>
<ul>
<li><strong>Select whether to install Python for all users of this computer</strong>: Select 'Install for all users'</li>
<li><strong>Select Destination Directory</strong>: The default Destination Directory is <code>C:\Python27\</code>.</li>
<li><strong>Customize Python</strong>: The default selections are fine.  At a minimum the
  <strong>Register Extensions</strong> and <strong>Utility Scripts</strong> selections should be enabled.</li>
</ul>
</li>
<li>
<p>Add the destination directory to the System PATH via Control Panel:</p>
<ul>
<li>On Windows XP: <strong>Control Panel → System → Advanced → Environment Variables</strong></li>
<li>On Windows 7: <strong>Control Panel → System and Security → System → Advanced system settings → Environment Variables</strong></li>
<li>Edit the Path entry in the <strong>System variables</strong> list</li>
<li>Add the Python installation path and the Python scripts directory to the beginning
  of the Path variable: <code>C:\Python27;C:\Python27\Scripts;</code></li>
</ul>
</li>
</ul>
<p>Open a command prompt window and test the Python installation:</p>
<pre><code>Microsoft Windows [Version 6.1.7601]
Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

C:\Users\fozzier&gt;python
Python 2.7.5 (default, May 15 2013, 22:43:36) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</code></pre>
<h3 id="python-module-distribution">Python Module Distribution</h3>
<p>In addition to the base Python runtime some additional modules are required to bootstrap an environment for the OpenStack client install.  The state of packaging in the Python world can be describes as 'in flux' at best.  That said, OpenStack uses the Python Package Index (PyPI) as its source of released packaged modules.</p>
<p>PyPI provides a mechanism to install released versions of Python libraries and tools directly.  The <code>pip</code> command is the interface to PyPI and performs the download and install functions as well as dependency resolution (albiet occasionally poorly).  It does not play well with packages installed by the native package managers on some systems (<em>cough</em> Red Hat <em>cough</em>). The former is a shortcoming that continues to be slowly addressed by the Python community but the latter can be treated with a tool called <code>virtualenv</code> (see below).</p>
<p>Many Python modules have also been packaged by Linux distributions and can be installed using the native package manager.  Often it is beneficial to install the vendor packages for hybrid modules especially if a C compiler is not present, or not desired, on the system.  The consensus in the OpenStack community is not to mix the two methods any more than necessary.</p>
<h4 id="pypi-and-pip">PyPI and pip</h4>
<p>The <a href="http://www.pip-installer.org/">pip</a> command must be installed to use PyPI and for non-native package installations that is best done using <code>easy_install</code> which itself needs to be installed as part of the <code>setuptools</code> module.  Check to see if <code>setuptools</code> is installed:</p>
<pre><code>python -c "import setuptools"
</code></pre>
<p>If <code>setuptools</code> is not installed an error similar to this will be displayed:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
ImportError: No module named setuptools
</code></pre>
<ul>
<li>
<p>If necessary, install <a href="https://pypi.python.org/pypi/setuptools/0.7.4">setuptools</a> using the <a href="https://bitbucket.org/pypa/setuptools/raw/0.7.4/ez_setup.py">ez_setup.py</a> script:</p>
<pre><code>python ez_setup.py
</code></pre>
</li>
<li>
<p>Install <code>pip</code> using <code>easy_install</code>:</p>
<pre><code>easy_install pip
</code></pre>
</li>
</ul>
<h4 id="hybrid-python-modules">Hybrid Python Modules</h4>
<p>Some common Python modules are not pure Python and require a C compiler to install from PyPI.  On Linux these are generally installed via native system packages.  On Windows many of these packages also have Windows binary installers that can be used with the official Python runtime. </p>
<p>OpenStack's Glance client requires <code>pyOpenSSL</code> which is one of these hybrid packages.  On Linux install the vendor-supplied package. OS X 10.7 and newer include an acceptable version.  On Windows it can be installed from PyPI directly using the supplied binary Windows install package:</p>
<ul>
<li>
<p>Download and install the <a href="https://pypi.python.org/packages/2.7/p/pyOpenSSL/pyOpenSSL-0.13.winxp32-py2.7.msi">pyOpenSSL installer</a>:</p>
<ul>
<li><strong>Select whether to install Python for all users of this computer</strong>: Select 'Install for all users'</li>
<li><strong>Select Python Installations</strong>: The default Python installation should be the one installed above.  Use it.</li>
</ul>
</li>
</ul>
<h4 id="openstack-client-libraries">OpenStack Client Libraries</h4>
<p>Installing the client libraries from PyPI will also bring in the required dependencies.  This step is the same for all platforms.</p>
<ul>
<li>
<p>Install the client libraries from PyPI:</p>
<pre><code>pip install python-keystoneclient python-novaclient python-cinderclient \
  python-glanceclient python-swiftclient
</code></pre>
</li>
</ul>
<h4 id="virtualenv">virtualenv</h4>
<p>Using <code>pip</code> in conjunction with a tool called <code>virtualenv</code> can be used to isolate the PyPi packages you install from your system packages. Install <code>virtualenv</code> using <code>pip</code>:</p>
<pre><code>pip install virtualenv
</code></pre>
<p>A new virtual environment is created and activated with the following commands:</p>
<pre><code>virtualenv ~/openstack-venv
source ~/openstack-venv/bin/activate
</code></pre>
<p>Once activated all packages installed with <code>pip</code> will be placed into the virtual environment without affecting or conflicting with the root system:</p>
<pre><code>pip install python-novaclient
</code></pre>
<p>Deactivating your virtual evironment is as simple as this:</p>
<pre><code>deactivate
</code></pre>
<p>For those of you that want to level-up your <code>virtualenv</code> experience, use a tool called <code>virtualenvwrapper</code>. It abstracts away the management of the virtual environment directories on your local system:</p>
<pre><code>mkvirtualenv openstack-venv
workon openstack-venv

pip install python-novaclient

deactivate
rmvirtualenv openstack-venv
</code></pre>
<h3 id="distro-specific-package-managers">Distro-specific Package Managers</h3>
<p>There are a couple of tradeoffs when consuming packages from distro-managed repositories. In the case of the OpenStack clients, development happens so rapidly that these repositories can grow stale very quickly. In the case that you still want to use a distro-specific package manager, it should be as simple as installing the python-*client packages. For example, here's how you can install python-novaclient on Ubuntu:</p>
<pre><code>apt-get install python-novaclient
</code></pre>
<h2 id="using-the-clients">Using the Clients</h2>
<h3 id="authentication">Authentication</h3>
<p>The first thing to tackle is authentication. Each of the OpenStack clients supports a set of common command-line arguments for this:</p>
<pre><code>--os-username
--os-password
--os-tenant-name
--os-auth-url
</code></pre>
<p>For example, the following is how you would list Nova instances while authenticating as the user <code>bcwaldon</code> on the tenant <code>devs</code> with the password <code>snarf</code> against the authentication endpoint <code>http://auth.example.com:5000/v2.0</code>:</p>
<pre><code>nova --os-username bcwaldon --os-password snarf --os-tenant-name devs \ 
     --os-auth-url http://auth.example.com:5000/v2.0 list
</code></pre>
<p>Alternatively, the OpenStack clients offer the same configuration through environment variables:</p>
<pre><code>export OS_USERNAME=bcwaldon
export OS_PASSWORD=snarf
export OS_TENANT_NAME=devs
expot OS_AUTH_URL=http://auth.example.com:5000/v2.0
nova list
</code></pre>
<h3 id="discovering-commands">Discovering Commands</h3>
<p>New features and commands are added to the client projects just about as quickly as the upstream core project development happens, so it is suggested that you </p>
<p>Each of the openstack client projects have a <code>help</code> command that will print a list of available commands:</p>
<pre><code>% cinder help
usage: cinder [--version] [--debug] [--os-username &lt;auth-user-name&gt;]
              [--os-password &lt;auth-password&gt;]
              [--os-tenant-name &lt;auth-tenant-name&gt;]
              [--os-tenant-id &lt;auth-tenant-id&gt;] [--os-auth-url &lt;auth-url&gt;]
              [--os-region-name &lt;region-name&gt;] [--service-type &lt;service-type&gt;]
              [--service-name &lt;service-name&gt;]
              [--volume-service-name &lt;volume-service-name&gt;]
              [--endpoint-type &lt;endpoint-type&gt;]
              [--os-volume-api-version &lt;compute-api-ver&gt;]
              [--os-cacert &lt;ca-certificate&gt;] [--retries &lt;retries&gt;]
              &lt;subcommand&gt; ...

Command-line interface to the OpenStack Cinder API.

Positional arguments:
  &lt;subcommand&gt;
    absolute-limits     Print a list of absolute limits for a user
    backup-create       Creates a backup.
    backup-delete       Remove a backup.
    backup-list         List all the backups.
    backup-restore      Restore a backup.
    backup-show         Show details about a backup.
    create              Add a new volume.
    credentials         Show user credentials returned from auth
    delete              Remove a volume.
    ...

Optional arguments:
  --version             show program's version number and exit
  --debug               Print debugging output
  --os-username &lt;auth-user-name&gt;
                        Defaults to env[OS_USERNAME].
  ...
</code></pre>

<p>Each <code>help</code> command optionally takes an argument:</p>
<pre><code>% cinder help create
usage: cinder create [--snapshot-id &lt;snapshot-id&gt;]
                     [--source-volid &lt;source-volid&gt;] [--image-id &lt;image-id&gt;]
                     [--display-name &lt;display-name&gt;]
                     [--display-description &lt;display-description&gt;]
                     [--volume-type &lt;volume-type&gt;]
                     [--availability-zone &lt;availability-zone&gt;]
                     [--metadata [&lt;key=value&gt; [&lt;key=value&gt; ...]]]
                     &lt;size&gt;

Add a new volume.

Positional arguments:
  &lt;size&gt;                Size of volume in GB

Optional arguments:
  --snapshot-id &lt;snapshot-id&gt;
                        Create volume from snapshot id (Optional,
                        Default=None)
  --source-volid &lt;source-volid&gt;
                        Create volume from volume id (Optional, Default=None)
  --image-id &lt;image-id&gt;
                        Create volume from image id (Optional, Default=None)
  --display-name &lt;display-name&gt;
                        Volume name (Optional, Default=None)
  --display-description &lt;display-description&gt;
                        Volume description (Optional, Default=None)
  --volume-type &lt;volume-type&gt;
                        Volume type (Optional, Default=None)
  --availability-zone &lt;availability-zone&gt;
                        Availability zone for volume (Optional, Default=None)
  --metadata [&lt;key=value&gt; [&lt;key=value&gt; ...]]
                        Metadata key=value pairs (Optional, Default=None)
</code></pre>

<h2 id="troubleshooting">Troubleshooting</h2>
<p>If you installed the clients using <code>pip</code>, the best thing to do when you feel like your clients are 'broken' is to destroy your virtual environment and reinstall.</p>
<p>If this doesn't solve your problem, you're unfortunately at the point that you need to use your search of engine of choice to find help, start debugging Python code or file a bug on Launchpad.</p>]]></content:encoded>
    </item>
    <item>
      <title>A CentOS 6 Image for OpenStack</title>
      <link>http://hackstack.org/x/blog/2013/04/25/a-centos-6-image-for-openstack</link>
      <pubDate>Thu, 25 Apr 2013 04:25:00 CDT</pubDate>
      <category><![CDATA[openstack]]></category>
      <category><![CDATA[rhel]]></category>
      <category><![CDATA[centos]]></category>
      <guid isPermaLink="false">xNWj4uudQrtb_Ova4tv9U5ysr-U=</guid>
      <description>A CentOS 6 Image for OpenStack</description>
      <content:encoded><![CDATA[<div class="document">
<p>This is the next installment in the never-ending series of OpenStack image builds.  Today's
target: CentOS</p>
<div class="section" id="image-characteristics">
<h1>Image Characteristics</h1>
<p>The usual suspects are present:</p>
<ul class="simple">
<li>minimal package install</li>
<li>serial console support</li>
<li>timezone is <tt class="docutils literal">Etc/UTC</tt></li>
<li>hostname set to instance name</li>
<li>a single partition with root filesystem, no swap</li>
<li>grow root filesystem to device size</li>
<li>enable EPEL (install epel-release)</li>
<li>enable could-init repo to get 0.7.1</li>
</ul>
<p>A few things are still lacking:</p>
<ul class="simple">
<li>selinux is in permissive mode, make enforcing</li>
<li>strengthen default firewall</li>
</ul>
</div>
<div class="section" id="build">
<h1>Build</h1>
<p>Tools like <tt class="docutils literal">Oz</tt> are a good idea in theory but in practice seem to be quite picky about the environment
they will correctly run on.  I'm looking at you <tt class="docutils literal">libguestfs</tt>.  Other tools like the venerable <tt class="docutils literal"><span class="pre">appliance-creator</span></tt> get hung up
on needing the same version of things in the host as in the chroot.</p>
<p>Good ole <tt class="docutils literal"><span class="pre">virt-install</span></tt> happily runs on damn near everything.  This build has been tested
on CentOS 6.4 and Ubuntu 12.10.  <cite>TODO(dtroyer): don't run this all as root</cite></p>
<p>Let's get started.</p>
<ul>
<li><p class="first">Install <cite>virt-install</cite> and all its prerequisites</p>
<ul>
<li><p class="first">on Ubuntu:</p>
<pre class="literal-block">
sudo apt-get install virtinst
</pre>
</li>
<li><p class="first">on CentOS:</p>
<pre class="literal-block">
sudo yum install libvirt python-virtinst qemu-kvm
sudo /etc/init.d/libvirtd start
</pre>
</li>
</ul>
</li>
<li><p class="first">Get a <a class="reference external" href="https://raw.github.com/dtroyer/image-recipes/master/centos-6-x86_64.ks">CentOS 6 kickstart</a> file with minimal stuff and the extras that we need.  Included in <tt class="docutils literal">%post</tt> is a bit to resize the root filesystem to the size of the actual device provided to the VM.</p>
</li>
</ul>
<ul>
<li><p class="first">Create base image with <tt class="docutils literal"><span class="pre">virt-install</span></tt>:</p>
<pre class="literal-block">
sudo virt-install \
    --name centos-6-x86_64 \
    --ram 1024 \
    --cpu host \
    --vcpus 1 \
    --nographics \
    --os-type=linux \
    --os-variant=rhel6 \
    --location=http://mirrors.kernel.org/centos/6/os/x86_64 \
    --initrd-inject=centos-6-x86_64.ks \
    --extra-args=&quot;ks=file:/centos-6-x86_64.ks text console=tty0 utf8 console=ttyS0,115200&quot; \
    --disk path=/var/lib/libvirt/images/centos-6-x86_64.img,size=2,bus=virtio \
    --force \
    --noreboot
</pre>
</li>
<li><p class="first">Point to the bridge with external connectivity if it is not <cite>eth0</cite>:</p>
<pre class="literal-block">
--network=bridge=br0
</pre>
</li>
<li><p class="first">If <tt class="docutils literal">libguestfs</tt> is functional on your build platform:</p>
<pre class="literal-block">
sudo yum install -y libguestfs-tools
sudo virt-sysprep --no-selinux-relabel -a /var/lib/libvirt/images/centos-6-x86_64.img
sudo virt-sparsify --convert qcow2 --compress /var/lib/libvirt/images/centos-6-x86_64.img centos-6-x86_64.qcow2
</pre>
</li>
<li><p class="first">Kick it into the cloud image repository:</p>
<pre class="literal-block">
glance image-create --name &quot;CentOS 6 x86_64&quot; --disk-format qcow2 --container-format bare --is-public false --file centos-6-x86_64.qcow2
</pre>
</li>
</ul>
<!-- save for selinux enforcing
# SELinux: relabelling all filesystem
echo "guestfis selinux relabel"
guestfish - -selinux -i $IMGNAME.$EXT <<EOF
sh load_policy
sh 'restorecon -Rv /'
EOF -->
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>OpenStack Developer Summit</title>
      <link>http://hackstack.org/x/blog/2013/04/19/openstack-developer-summit</link>
      <pubDate>Fri, 19 Apr 2013 19:04:00 CDT</pubDate>
      <category><![CDATA[openstack]]></category>
      <guid isPermaLink="false">RltD8bcInfRJzTxxe85BL1Ep_38=</guid>
      <description>OpenStack Developer Summit</description>
      <content:encoded><![CDATA[<div class="document">
<p>The OpenStack Developer Summit has just concluded in Portland, OR, and by many measures was an enormous success.
Enormous because there were a reported &gt;2800 people in attendance.  I never heard a breakdown of how many
of those were developers but I'd guess that that number was up too.  The rooms were generally full
but usually only a handful of people actively participated in most sessions.
And speaking of full rooms, most of the 'project-formerly-known-as-Quantum' sessions were SRO.
I skipped those due to other interests but the word is none of the network vendors did.
Most of my time was spent looking for things that affected my three primary projects:
DevStack, Grenade and OpenStackClient.</p>
<p><strong>DevStack</strong></p>
<p>There was no dedicated session to DevStack
but it did not escape mention.  Most of the talk I heard about it was in conjunction with its
use in the CI gating tests and even then there wasn't much.
The hallway talk seemed to always revolve around adding functionality that really doesn't belong in DevStack.
It was nice to be able to explain in person that
the requested feature wasn't core to DevStack's purpose and how they can easily hook in to
<tt class="docutils literal">stack.sh</tt> to add the feature.</p>
<p><strong>Grenade</strong></p>
<p>Grenade had a session on Tuesday led my moi that concentrated on the project upgrade strategy and
gate issues.  Fortunately the discussion
around run time was short, Grenade's &lt;5 minutes is dwarfed by Tempest so nobody really cares.</p>
<p>The upgrade strategy noted the change from rewriting new config files based on the samples
included in the project repo to only making upgrade-necessary changes to the existing config files.
The current Grenade implementation does this for all but Keystone and Swift.  The consensus
in the room was that both of those should be fixable with some knowledgable input.</p>
<p>There are some improvements that can be made to <tt class="docutils literal"><span class="pre">devstack-vm-gate*.sh</span></tt> to simplify the configuration
that is actually run in the gate test.  The goal here is to make the gate closer to the
configuration that is typically used by devs.</p>
<p><strong>OpenStackClient</strong></p>
<p>The first (and last) two sessions on OpenStackClient at previous summits were dominated by
talk about what it should be and how people wanted to use it.  The project is at a stage where
it needs to get some things completed so we can make a 0.1 pre-alpha release.  We grabbed
an Unconference slot on Wednesday to get the primary developers together and decide on a few
things, like the tasks to be completed prior to the 0.1 release.  There were others present who
I'm afraid we left wondering where the presentation was.</p>
<p>Command parity with the project clients, save for that name-that-used-to-start-with-a-q project's client, is the major
task for release.  Compute is not complete (<em>dtroyer</em>), Object (Swift) is non-existant, and
the remainder are close but need an audit to see what may be missing since they were first
implemented.</p>
<p>The major news in the command front is the change of my beloved &quot;verb object&quot; form to
&quot;object verb&quot;. <a class="footnote-reference" href="#id2" id="id1">[1]</a> There is finally a good reason to change: to facilitate bash tab-completion.
I'm taking <em>dhellmann's</em> word on this as tab-completion  has not been done yet.  And I'll be dipped
if I can't come up with anything to counter it. So to ease my pain, Doug volunteered to
make the change.</p>
<p><strong>Image Interchange</strong></p>
<p>This session kept getting sidetracked by people wanting to make the common image format
include the contents of the system in addition to the format of the disk image file.
<em>smoser</em> did his best to remind everyone that Glance's concern with image formats stopped
at the file blocks that contain filesystem bits.  The contents of those blocks is off-limits.</p>
<p>It should be remembered that in previous summits the opening of user-submitted disk images
to inject files and user data was specifically removed from Nova due to the potential
security issues involved.  Also there is the matter of knowing just what to do to a random
filesystem.  This led to the adoption of cloud drive as an alternative to AWS-style metadata
service.</p>
<p>The intention of the session was to work out details of exchanging images between clouds, including
the disk format used.  Apparently there are OpenStack implementations that do not support
the qcow2 format because otherwise that is what should be used as it has both compression
and sparse capabilities.  Of course raw would also work but let's be realistic here.</p>
<p><strong>Dependency Management</strong></p>
<p>This is one session that may have some positive effects on DevStack as a side effect of
documenting OS-level package dependencies for each project.  The session primarily concerned
opestack/requirements as a gate for Python dependencies and the use of an OpenStack-specific
PyPi mirror.</p>
<p>The interesting bit to me is the need to handle non-pip-installable dependencies.  DevStack
already maintains some of this information for distros and releases.  Moving this into the
project repos would allow it to be used by other processes and get DevStack completely out
of tracking project dependencies.  It remains TBD as to who actually does the install.</p>
<p><strong>Project Renaming</strong></p>
<p>A recent issue with one of the OpenStack projects that once had a code name with a 'Q' and
two 'u's is no longer calling itself that.  I'm not touching the reasons why, that is for others
to explain.  What I am mostly interested in is the amount of work required to change a projects name,
even when it is done at phase boundaries such as moving into and out of incubation.</p>
<p>This means that choosing a project name has more pressure to get it right the first time than before.
I am assuming here that the common sentiment expressed in the session to not stop using project names
is the path chosen even if the public use of project names is ramped down.</p>
<p>Two of the three projects that I am deeply involved in (read as 'would do more than a little of
the name changing work') have names that are invented terms so the chance that there might be confusion
in the industry is low.  And a different set of two of those projects are primarily used internally
and should get little public attention.</p>
<p><strong>Wrapup</strong></p>
<p>That does it for the highlights of my week in Portland.  I'll leave it to others to summarize
the rest, save for pimping Terrence and Bertram's <a class="reference external" href="http://dopenstack.com">latest video</a>
that provided an energetic open to the keynotes.  Stay tuned for some deeper thoughts on a few of the topics mentioned here.</p>
<table class="docutils footnote" frame="void" id="id2" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td>Sorry VMS DCL fans, I tried.</td></tr>
</tbody>
</table>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>A Fedora 18 Image for OpenStack</title>
      <link>http://hackstack.org/x/blog/2013/01/25/a-fedora-18-image-for-openstack</link>
      <pubDate>Fri, 25 Jan 2013 01:25:00 CST</pubDate>
      <category><![CDATA[openstack]]></category>
      <category><![CDATA[fedora]]></category>
      <guid isPermaLink="false">1jKqR7FTq7lyLCIBc9iAX1D25Bg=</guid>
      <description>A Fedora 18 Image for OpenStack</description>
      <content:encoded><![CDATA[<div class="document">
<p>Building images to boot in a cloud can be a lot of fun, especially since now two clouds are built alike.
Now fortunately the differences are mostly minor, but some of the minor differences can be fatal. Ugh.</p>
<div class="section" id="good-news">
<h1>Good News</h1>
<p>The recent release of Fedora 18 brought with it a pleasant surprise, the build of some images suitable for loading into your favorite cloud, ala Ubuntu's UEC images.
The <a class="reference external" href="http://lists.fedoraproject.org/pipermail/cloud/2013-January/002192.html">mailing list notice</a> gives the background and a reply in that thread mentions some desirable changes.  So in order to make those changes I decided to roll my own using the FCI <a class="reference external" href="/x/files/fedora-18-x86_64-cloud.ks">kickstart</a> as a base.</p>
<p>The <a class="reference external" href="/x/files/fedora-18-x86_64-cloud-dt1.ks">new kickstart</a> file is pretty straightforward and mostly self-explanatory.  Here is what I changed:</p>
<pre class="literal-block">
* Set the timezone to ``Etc/UTC``
* Configure for serial console
* Create a default ``fedora`` user (instead of ``ec2-user``)
* Leave behind a build timestamp in /etc/.build
* Remove sendmail
* Add ??
</pre>
<p>And here is what it took to get <tt class="docutils literal"><span class="pre">appliance-creator</span></tt> running on a fresh Fedora 17 VM:</p>
<pre class="literal-block">
sudo yum install -y appliance-tools.noarch
wget -N http://git.fedorahosted.org/cgit/cloud-kickstarts.git/plain/generic/fedora-18-x86_64-cloud.ks
# make kickstart changes
sudo appliance-creator --config fedora-18-x86_64-cloud-dt1.ks --name fedora18-x86_64-cloud-dt1 --format raw
</pre>
<p>The conversion to qcow2 is done separately as <tt class="docutils literal"><span class="pre">appliance-creator</span></tt> doesn't compress qcow2 images:</p>
<pre class="literal-block">
qemu-img convert -c -f raw -O qcow2 fedora-18-x86_64-cloud-dt1.raw fedora-18-x86_64-cloud-dt1.qcow2
</pre>
<p>Kick it into the cloud image repository:</p>
<pre class="literal-block">
glance image-create --name &quot;Fedora 18 x86_64 cloudimg&quot; --disk-format qcow2 --container-format bare --is-public false --file fedora-18-x86_64-cloud-dt1/fedora-18-x86_64-cloud-dt1-sda.qcow2
</pre>
<div class="section" id="kickstart-details">
<h2>Kickstart Details</h2>
<p>All of the excerpts below are shown in diff(1) format to illustrate the changes made to the original kickstart file.</p>
<div class="section" id="timezone">
<h3>Timezone</h3>
<p>Set the timezone to <tt class="docutils literal">Etc/UTC</tt>:</p>
<pre class="literal-block">
-timezone --utc America/New_York
+timezone --utc Etc/UTC
</pre>
</div>
<div class="section" id="serial-console">
<h3>Serial Console</h3>
<p>There are a couple of things that need to be updated to properly get a serial console in Linux.
Append to the bootloader:</p>
<pre class="literal-block">
-bootloader --timeout=0 --location=mbr --driveorder=sda
+bootloader --timeout=0 --location=mbr --driveorder=sda --append=&quot;console=tty console=ttyS0&quot;
</pre>
<p>Configuring Grub takes a little more effort. The original kickstart only worked in the chroot-ed %post but <tt class="docutils literal"><span class="pre">grub2-mkconfig</span></tt> failed because /dev was not complete.
By adding a <tt class="docutils literal">%post <span class="pre">--nochroot</span></tt> section /dev can be bind-mounted into the chroot so <tt class="docutils literal"><span class="pre">grub2-mkconfig</span></tt> is happy.
I probably went a little overboard in setting up the proper serial console arguments to the kernel command line but the following worked:</p>
<pre class="literal-block">
+%post --nochroot
+echo &quot;Configure GRUB2 for serial console&quot;
+echo GRUB_TIMEOUT=0 &gt; $INSTALL_ROOT/etc/default/grub
+echo GRUB_TERMINAL=console &gt;&gt;$INSTALL_ROOT/etc/default/grub
+echo GRUB_CMDLINE_LINUX=\&quot;console=ttyS0 console=tty\&quot; &gt;&gt;$INSTALL_ROOT/etc/default/grub
+echo GRUB_CMDLINE_LINUX_DEFAULT=\&quot;console=ttyS0\&quot; &gt;&gt;$INSTALL_ROOT/etc/default/grub
+mount -o bind /dev $INSTALL_ROOT/dev
+/usr/sbin/chroot $INSTALL_ROOT /sbin/grub2-mkconfig -o /boot/grub2/grub.cfg
+umount $INSTALL_ROOT/dev
+%end
</pre>
<p>The following lines were also removed from the original <tt class="docutils literal">%post</tt> Grub section:</p>
<pre class="literal-block">
-echo GRUB_TIMEOUT=0 &gt; /etc/default/grub
-sed -i 's/^set timeout=5/set timeout=0/' /boot/grub2/grub.cfg
</pre>
</div>
<div class="section" id="default-account">
<h3>Default Account</h3>
<p><tt class="docutils literal"><span class="pre">cloud-init</span></tt> creates an <tt class="docutils literal"><span class="pre">ec2-user</span></tt> account by default.  The account is useful but this isn't EC2 so the account is renamed to <tt class="docutils literal">fedora</tt>:</p>
<pre class="literal-block">
-# Uncomment this if you want to use cloud init but suppress the creation
-# of an &quot;ec2-user&quot; account. This will, in the absence of further config,
-# cause the ssh key from a metadata source to be put in the root account.
-#cat &lt;&lt;EOF &gt; /etc/cloud/cloud.cfg.d/50_suppress_ec2-user_use_root.cfg
-#users: []
-#disable_root: 0
-#EOF
+# Rename the 'ec2-user' account to 'fedora'
+sed -i '
+  s/name: ec2-user/name: fedora/g
+  s/gecos: EC2/gecos: Fedora/g
+' /etc/cloud/cloud.cfg
</pre>
</div>
<div class="section" id="build-stamp">
<h3>Build Stamp</h3>
<p>Leave a file containing the build version and timestamp just in case it might be useful from inside the VM:</p>
<pre class="literal-block">
+# Leave behind a build stamp
+echo &quot;build=nebula1 $(date +%F.%T)&quot; &gt;/etc/.build
</pre>
</div>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Securing OpenStack Client Connections Part 2</title>
      <link>http://hackstack.org/x/blog/2012/12/21/securing-openstack-client-connections-part-2</link>
      <pubDate>Fri, 21 Dec 2012 12:12:12 CST</pubDate>
      <category><![CDATA[openstack]]></category>
      <category><![CDATA[devstack]]></category>
      <guid isPermaLink="false">IZEREiaAiOZB3E2UqmEI6sBnIY4=</guid>
      <description>Securing OpenStack Client Connections Part 2</description>
      <content:encoded><![CDATA[<div class="document">
<p>In the first part of this series we covered creating a pair of certificate authorities and a signed certificate with the same attributes commonly found in commercial certificates.  This part covers the OpenStack Python clients and proper certificate verification.</p>
<p>The OpenStack client repositories (or packages) include both the Python API bindings and the reference command line interface (CLI) implementation to communicate with the OpenStack APIs.   Client support for modern encrypted connections, i.e SSLv3 and/or TLSv1, has been spotty at best.</p>
<p>Most of the clients are capable of using SSL for encryption but often the certificate verification part of the protocol did not work properly for tier-2 or privately signed certificates, prompting the addition of the <tt class="docutils literal"><span class="pre">--insecure</span></tt> option to some of the clients to sidestep the problem altogether.  In addition, most of the clients had no mechanism to specify an alternate CA bundle file to enable certificate verification for certificates not signed by the commercial CAs.</p>
<p>Python has historically had incomplete X.509 certificate support in its standard library.  For example, <tt class="docutils literal">ssl</tt> and <tt class="docutils literal">httplib</tt> do not verify the hostname as part of certificate verification. Four of the clients (keystone, nova, cinder, quantum) use <tt class="docutils literal">httplib2</tt> which had no hostname verification before version 0.7.0 and what it currently has is also incomplete. The other two clients (glance and swift) use <tt class="docutils literal">httplib</tt> directly and either have no hostname verification (swift) or implement it locally (glance).</p>
<div class="section" id="issue-summary">
<h1>Issue Summary</h1>
<ul class="simple">
<li>Python's <tt class="docutils literal">ssl</tt> module does no certificate hostname verification in 2.7.x; it has been added in 3.2 but will not be backported. <a class="footnote-reference" href="#id3" id="id1">[1]</a></li>
<li><tt class="docutils literal">ssl</tt> is pinned to using protocol version <tt class="docutils literal">SSLv23</tt> and must be directly patched to override it.</li>
<li><tt class="docutils literal">httplib</tt> uses <tt class="docutils literal">ssl</tt> and adds no hostname verification.  In addition it only uses the default <tt class="docutils literal">SSLV23</tt> protocol version set by <tt class="docutils literal">ssl</tt>.  We don't want this as SSLv2 is deprecated and insecure.  Patching that value directly into the <tt class="docutils literal">ssl</tt> module works but is suboptimal.</li>
<li><tt class="docutils literal">httplib2</tt> implements a basic hostname verification but it has some problems such as only checking <tt class="docutils literal">commonName</tt> if the certificate's <tt class="docutils literal">subjectAltNames</tt> is not present and handling wildcards differently than specified in RFC-2818.</li>
<li><tt class="docutils literal">httplib2</tt> uses an internal ca bundle (<tt class="docutils literal">cacert.txt</tt>) if the <tt class="docutils literal">ca_certs</tt> argument is not given to <tt class="docutils literal">HTTPSConnectionWithTimeout.__init__()</tt>.</li>
<li>In other news, <tt class="docutils literal">httplib2</tt> only supports 3xx redirects for GET method.</li>
</ul>
<div class="section" id="additional-notes">
<h2>Additional Notes</h2>
<p>glanceclient has patched the <tt class="docutils literal">ssl</tt> module out of <tt class="docutils literal">httplib</tt> in favor of <tt class="docutils literal">pyOpenSSL</tt>.  Stuart McLaren added <tt class="docutils literal">http.VerifiedHTTPSConnection.host_matches_cert()</tt> to validate <tt class="docutils literal">commonName</tt> and <tt class="docutils literal">subjectAltName</tt> for <tt class="docutils literal">httplib</tt> connections but it doesn't handle wildcards.</p>
</div>
</div>
<div class="section" id="why-requests-2">
<h1>Why requests? <a class="footnote-reference" href="#id4" id="id2">[2]</a></h1>
<p>The <tt class="docutils literal">requests</tt> module backported <tt class="docutils literal">match_hostname()</tt> from Python 3.2.  Like the rest of the modules here it does not handle the <tt class="docutils literal">iPAddress</tt> attribute in <tt class="docutils literal">subjectAltName</tt>. This is mostly relevant in development and testing use cases like with DevStack.  The 3.2 <tt class="docutils literal">match_hostname()</tt> implementation however does allow IP addresses as a <tt class="docutils literal">dNSName</tt>.</p>
<p><tt class="docutils literal">requests</tt> also brings a number of other features to the table that may or may not have been implemented individually in the existing clients such as JSON encoding/decoding and 3xx redirection support for POST, PUT, PATCH DELETE, and HEAD.  Plus it is stable (notwithstanding the recent 1.0 release) and the developer is known in the OS community.</p>
</div>
<div class="section" id="the-cli-solution">
<h1>The CLI Solution</h1>
<p>There has recently been a round of patches to the CLIs to get them all up to the same level of support for TLSv1 to be used for authentication at a minimum.  Glance and Swift continue to use <tt class="docutils literal">httplib</tt> directly for their data transfer connections (really, all connections to their respective services) and these already support SSLv3.</p>
<table border="1" class="docutils">
<colgroup>
<col width="11%" />
<col width="16%" />
<col width="44%" />
<col width="16%" />
<col width="13%" />
</colgroup>
<thead valign="bottom">
<tr><th class="head">Client</th>
<th class="head">HTTP Module</th>
<th class="head">Client object</th>
<th class="head">CLI Arg</th>
<th class="head">Env Var</th>
</tr>
</thead>
<tbody valign="top">
<tr><td>keystone</td>
<td>httplib2</td>
<td>class.HTTPClient(httplib2.Http)</td>
<td>--os-cacert</td>
<td>OS_CACERT</td>
</tr>
<tr><td>nova</td>
<td>httplib2</td>
<td>class.HTTPClient(httplib2.Http)</td>
<td>n/a</td>
<td>n/a</td>
</tr>
<tr><td>cinder</td>
<td>httplib2</td>
<td>class.HTTPClient(httplib2.Http)</td>
<td>n/a</td>
<td>n/a</td>
</tr>
<tr><td>glance</td>
<td>httplib</td>
<td>class.HTTPClient(object)</td>
<td>--ca-file</td>
<td>n/a</td>
</tr>
<tr><td>swift</td>
<td>httplib</td>
<td>class Connection(object)</td>
<td>n/a</td>
<td>n/a</td>
</tr>
<tr><td>quantum</td>
<td>httplib2</td>
<td>class.HTTPClient(httplib2.Http)</td>
<td>n/a</td>
<td>n/a</td>
</tr>
</tbody>
</table>
<p>The approach taken for the <tt class="docutils literal">httplib2</tt> subclasses is to change the parent class to <tt class="docutils literal">object</tt> and rework the <tt class="docutils literal">request()</tt> method to call <tt class="docutils literal">requests.request()</tt>.  Some of the differences for <tt class="docutils literal">requests</tt> leaked out of that method but have been mostly containd within the <tt class="docutils literal">HTTPClient</tt> class.  All four of the clients (formerly) using <tt class="docutils literal">httplib2</tt> have implemented one or more features that can easily be handled by <tt class="docutils literal">requests</tt> (redirection) or should also be propogated to the other clients.  This is ripe for a refactor of <tt class="docutils literal">HTTPClient</tt> to a common module but that effort is not in scope here.</p>
<div class="section" id="keystoneclient">
<h2>keystoneclient</h2>
<p>Implemented in <a class="reference external" href="https://review.openstack.org/#/c/17624/">https://review.openstack.org/#/c/17624/</a> <em>(complete)</em></p>
<ul class="simple">
<li>replace <tt class="docutils literal">httplib2</tt> with <tt class="docutils literal">requests</tt></li>
</ul>
</div>
<div class="section" id="novaclient">
<h2>novaclient</h2>
<p>Implemented in <a class="reference external" href="https://review.openstack.org/#/c/18257/">https://review.openstack.org/#/c/18257/</a> <em>(complete)</em></p>
<ul class="simple">
<li>replace <tt class="docutils literal">httplib2</tt> with <tt class="docutils literal">requests</tt></li>
<li>add <tt class="docutils literal"><span class="pre">--os-cacert</span></tt> and <tt class="docutils literal">OS_CACERT</tt> support</li>
<li>provide <tt class="docutils literal">ca_cert</tt> to keystone client for authentication</li>
</ul>
</div>
<div class="section" id="cinderclient">
<h2>cinderclient</h2>
<p>Implemented in <a class="reference external" href="https://review.openstack.org/#/c/18278/">https://review.openstack.org/#/c/18278/</a> <em>(complete)</em></p>
<ul class="simple">
<li>replace <tt class="docutils literal">httplib2</tt> with <tt class="docutils literal">requests</tt></li>
<li>add <tt class="docutils literal"><span class="pre">--os-cacert</span></tt> and <tt class="docutils literal">OS_CACERT</tt> support</li>
<li>provide <tt class="docutils literal">ca_cert</tt> to keystone client for authentication</li>
</ul>
</div>
<div class="section" id="glanceclient">
<h2>glanceclient</h2>
<p>Implemented in <a class="reference external" href="https://review.openstack.org/#/c/17698/">https://review.openstack.org/#/c/17698/</a> <em>(complete)</em></p>
<ul class="simple">
<li>rename <tt class="docutils literal"><span class="pre">--ca-cert</span></tt> to <tt class="docutils literal"><span class="pre">--os-cacert</span></tt> and add <tt class="docutils literal">OS_CACERT</tt></li>
<li>provide <tt class="docutils literal">ca_cert</tt> to keystone client for authentication</li>
</ul>
</div>
<div class="section" id="swiftclient">
<h2>swiftclient</h2>
<p>Implemented in <a class="reference external" href="https://review.openstack.org/#/c/18393/">https://review.openstack.org/#/c/18393/</a> <em>(complete)</em></p>
<ul class="simple">
<li>add <tt class="docutils literal"><span class="pre">--os-cacert</span></tt> and <tt class="docutils literal">OS_CACERT</tt> support</li>
<li>provide <tt class="docutils literal">ca_cert</tt> to keystone client for authentication</li>
</ul>
</div>
<div class="section" id="quantumclient">
<h2>quantumclient</h2>
<p><em>(not started)</em></p>
<ul class="simple">
<li>replace <tt class="docutils literal">httplib2</tt> with <tt class="docutils literal">requests</tt></li>
<li>add <tt class="docutils literal"><span class="pre">--os-cacert</span></tt> and <tt class="docutils literal">OS_CACERT</tt> support</li>
<li>provide <tt class="docutils literal">ca_cert</tt> to keystone client for authentication</li>
</ul>
</div>
<div class="section" id="testing">
<h2>Testing</h2>
<p>Aside from the usual unit tests, support for a TLS proxy is being added to DevStack to demonstrate and test a TLS-enabled OpenStack configuration.  It uses <tt class="docutils literal">stud</tt> as the TLS endpoint that proxies to the usual service endpoints.  The most interesting challenge here is doing it all on a single host and making the service catalog work.  Yay!  This will be described in (hopefully) the next post in this series.</p>
<p>The TLS-in-DevStack also builds a two-tiered CA (root and intermediate) for testing proper certificate chain validation as described in <a class="reference external" href="/x/blog/2012/12/18/securing-openstack-client-connections-part-1/">the first installment</a>.</p>
</div>
</div>
<div class="section" id="links">
<h1>Links</h1>
<ul class="simple">
<li>glanceclient <tt class="docutils literal">host_matches_cert()</tt>: <a class="reference external" href="https://review.openstack.org/#/c/16305/4/glanceclient/common/http.py">https://review.openstack.org/#/c/16305/4/glanceclient/common/http.py</a></li>
<li><tt class="docutils literal">request</tt>'s <tt class="docutils literal">urllib3.ssl_match_hostname.match_hostname()</tt>: <a class="reference external" href="https://github.com/kennethreitz/requests/blob/master/requests/packages/urllib3/connectionpool.py#L72">https://github.com/kennethreitz/requests/blob/master/requests/packages/urllib3/connectionpool.py#L72</a> <a class="reference external" href="https://github.com/kennethreitz/requests/blob/master/requests/packages/urllib3/packages/ssl_match_hostname/__init__.py#L23">https://github.com/kennethreitz/requests/blob/master/requests/packages/urllib3/packages/ssl_match_hostname/__init__.py#L23</a></li>
</ul>
<hr class="docutils" />
<table class="docutils footnote" frame="void" id="id3" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td><a class="reference external" href="http://bugs.python.org/issue1589">Python issue 1589</a>, the comments about 2.x <a class="reference external" href="http://bugs.python.org/issue1589#msg120946">begin here</a>.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id4" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id2">[2]</a></td><td>The patches for the OpenStack CLIs were engineered and implemented before the release of <tt class="docutils literal">requests</tt> 1.0 which is a significantly different implementation and is untested in our application.</td></tr>
</tbody>
</table>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Securing OpenStack Client Connections Part 1</title>
      <link>http://hackstack.org/x/blog/2012/12/18/securing-openstack-client-connections-part-1</link>
      <pubDate>Tue, 18 Dec 2012 12:12:12 CST</pubDate>
      <category><![CDATA[openstack]]></category>
      <category><![CDATA[devstack]]></category>
      <guid isPermaLink="false">5jJXv_GXKDmqOhzJwtDRFGMV5ls=</guid>
      <description>Securing OpenStack Client Connections Part 1</description>
      <content:encoded><![CDATA[<div class="document">
<p>We all know that the difference between <tt class="docutils literal">https</tt> and <tt class="docutils literal">http</tt> is the addition of encryption, right?  Of course, but less attention is paid to the other purposes of SSL and TLS: to verify one or both of the parties involved in the connection and to validate that the objects used in the verification meet certain criteria. <a class="footnote-reference" href="#id3" id="id1">[1]</a>  In the common case of a user directing a web browser to a 'secure' site, only one side is potentially validated, that being the server.  Maybe.</p>
<p>Browsers generally go a good job of performing server certificate verification and validation but other https clients may not do so well.  Sometimes the web browser will pop up a box saying that the server is untrusted for one reason or another.  This can be the result of a failure to validate the server certificate or verifying that the name used to reach the server matches who the server claims to be.  It will usually contain the reason for the failure but generally it also contains a button to click on that allows the connection to proceed.  This effectively neuters the validation process and opens the door for server spoofing and man-in-the-middle attacks.</p>
<p>The point here is not to rehash the merits of that behaviour but to investigate the use of <tt class="docutils literal">https</tt> in the OpenStack Python clients and to validate their certificate verification.  And validation.  Mmmmmm...recursion...</p>
<div class="section" id="but-first">
<h1>But First</h1>
<p>Before we can delve into the world of Python modules and SSL wrappers we must first have a way to test against some known secure servers.  This means uncorking some OpenSSL-foo and entering the dark world of certificate authorities (CA).  &quot;But that's been covered to death!&quot; you may say.  Yes it has <a class="footnote-reference" href="#id4" id="id2">[2]</a>, but generally only to the level of self-sigining a cert for use in private servers.  I believe the common name for these certs is 'snakeoil'.  However, certificates in the real world are not only self-signed, but often signed by a CA that is itself signed by one or more parent CAs.  The root CA certificates are included in the lists shipped with most operating systems, browsers and even some programming libraries.</p>
<p>Our goal then is to build a server certificate that is a) signed by an intermediate CA and b) has the basic attributes and extensions common in real-world certificates.  To get that we need a root CA and an intermediate CA.  To get that we need some shell scripts and OpenSSL configuration files for each operation.</p>
<p>Note that in this exercise we do not encrypt the private keys as this is all used for development and testing of the SSL/TLS connections and should not be used for production.</p>
</div>
<div class="section" id="root-ca">
<h1>Root CA</h1>
<p>A self-signed certificate has the unique characteristic of the Issuer matches the Subject.  Creating a self-signed root CA is a common operation and has been covered many times elsewhere.  So here are the basics:</p>
<ul>
<li><p class="first">Create the root CA directory structure:</p>
<pre class="literal-block">
for i in certs crl newcerts private; do
    mkdir -p CA/root-ca/$i
done
chmod 710 CA/root-ca/private
echo &quot;01&quot; &gt;CA/root-ca/serial
touch CA/root-ca/index.txt
</pre>
</li>
<li><p class="first">Generate the root CA configuration file <tt class="docutils literal"><span class="pre">CA/root-ca/ca.conf</span></tt>:</p>
<pre class="literal-block">
echo '
[ ca ]
default_ca = CA_default

[ CA_default ]
dir                     = ./CA/root-ca
policy                  = policy_match
database                = $dir/index.txt
serial                  = $dir/serial
certs                   = $dir/certs
crl_dir                 = $dir/crl
new_certs_dir           = $dir/newcerts
certificate             = $dir/cacert.pem
private_key             = $dir/private/cacert.key
RANDFILE                = $dir/private/.rand
default_md              = default

[ req ]
default_bits            = 1024
default_md              = sha1

prompt                  = no
distinguished_name      = ca_distinguished_name

x509_extensions         = ca_extensions

[ ca_distinguished_name ]
organizationName        = Example Inc.
organizationalUnitName  = Certificate Authority
emailAddress            = ca&#64;example.com
commonName              = Example Inc Root CA

[ policy_match ]
countryName             = optional
stateOrProvinceName     = optional
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ ca_extensions ]
basicConstraints        = critical,CA:true
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always, issuer
keyUsage                = cRLSign, keyCertSign

' &gt;CA/root-ca/ca.conf
</pre>
<p>The <tt class="docutils literal">ca_distinguished_name</tt> section defines the full name of the root CA.</p>
</li>
<li><p class="first">Generate a private key and self-signed certificate:</p>
<pre class="literal-block">
openssl req -config CA/root-ca/ca.conf \
    -x509 \
    -nodes \
    -newkey rsa \
    -days 21360 \
    -keyout CA/root-ca/private/cacert.key \
    -out CA/root-ca/cacert.pem \
    -outform PEM
</pre>
</li>
<li><p class="first">Take a peek at the root certificate:</p>
<pre class="literal-block">
openssl x509 -noout -text -in CA/root-ca/cacert.pem
</pre>
</li>
</ul>
</div>
<div class="section" id="intermediate-ca">
<h1>Intermediate CA</h1>
<p>Creating an Intermediate CA is very similar except the root CA must do the signing so the process takes a couple of additional steps:</p>
<ul>
<li><p class="first">Create the intermediate CA directory structure:</p>
<pre class="literal-block">
for i in certs crl newcerts private; do
    mkdir -p CA/int-ca/$i
done
chmod 710 CA/int-ca/private
echo &quot;01&quot; &gt;CA/int-ca/serial
touch CA/int-ca/index.txt
</pre>
</li>
<li><p class="first">Generate the intermediate CA configuration file <tt class="docutils literal"><span class="pre">CA/int-ca/ca.conf</span></tt>:</p>
<pre class="literal-block">
echo '
[ ca ]
default_ca = CA_default

[ CA_default ]
dir                     = ./CA/int-ca
policy                  = policy_match
database                = $dir/index.txt
serial                  = $dir/serial
certs                   = $dir/certs
crl_dir                 = $dir/crl
new_certs_dir           = $dir/newcerts
certificate             = $dir/cacert.pem
private_key             = $dir/private/cacert.key
RANDFILE                = $dir/private/.rand
default_md              = default

[ req ]
default_bits            = 1024
default_md              = sha1

prompt                  = no
distinguished_name      = ca_distinguished_name

x509_extensions         = ca_extensions

[ ca_distinguished_name ]
organizationName        = Example Inc.
organizationalUnitName  = Certificate Authority
emailAddress            = ca&#64;example.com
commonName              = Example Inc Intermediate CA

[ policy_match ]
countryName             = optional
stateOrProvinceName     = optional
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ ca_extensions ]
basicConstraints        = critical,CA:true
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always, issuer
keyUsage                = cRLSign, keyCertSign

' &gt;CA/int-ca/ca.conf
</pre>
<p>Note that the <tt class="docutils literal">commonName</tt> in the <tt class="docutils literal">ca_distinguished_name</tt> section is different than the root CA.  The <tt class="docutils literal">ca_extensions</tt> section is also critical here, specifically the <tt class="docutils literal">keyUsage</tt> attribute containing the <tt class="docutils literal">keyCertSign</tt> so the certificate signed can be used itself to sign other certificates.</p>
</li>
<li><p class="first">Generate a private key and certificate signing request:</p>
<pre class="literal-block">
openssl req -config CA/int-ca/ca.conf \
    -sha1 \
    -nodes \
    -newkey rsa \
    -keyout CA/int-ca/private/cacert.key \
    -out CA/int-ca/int-ca.csr \
    -outform PEM
</pre>
</li>
<li><p class="first">Sign the CSR:</p>
<pre class="literal-block">
openssl ca -config CA/root-ca/ca.conf \
    -extensions ca_extensions \
    -days 365 \
    -notext \
    -in CA/int-ca/int-ca.csr \
    -out CA/int-ca/cacert.pem \
    -batch
</pre>
</li>
<li><p class="first">Create a trust chain, a file that contains the CA certificates from the immediate signing CA back to the root CA:</p>
<pre class="literal-block">
cat CA/root-ca/cacert.pem CA/int-ca/cacert.pem &gt;&gt;CA/int-ca/ca-chain.pem
</pre>
</li>
<li><p class="first">Take a peek at the intermediate certificate:</p>
<pre class="literal-block">
openssl x509 -noout -text -in CA/int-ca/cacert.pem
</pre>
</li>
</ul>
</div>
<div class="section" id="server-certificate">
<h1>Server Certificate</h1>
<p>This process is repeated for every server that needs a certificate.</p>
<ul>
<li><p class="first">Generate the intermediate CA signing configuration file <tt class="docutils literal"><span class="pre">CA/int-ca/sign.conf</span></tt>:</p>
<pre class="literal-block">
echo '
[ ca ]
default_ca = CA_default

[ CA_default ]
dir                     = ./CA/int-ca
policy                  = policy_match
database                = $dir/index.txt
serial                  = $dir/serial
certs                   = $dir/certs
crl_dir                 = $dir/crl
new_certs_dir           = $dir/newcerts
certificate             = $dir/cacert.pem
private_key             = $dir/private/cacert.key
RANDFILE                = $dir/private/.rand
default_md              = default

[ req ]
default_bits            = 1024
default_md              = sha1

prompt                  = no
distinguished_name      = req_distinguished_name

x509_extensions         = req_extensions

[ req_distinguished_name ]
organizationName        = Example Inc.

[ policy_match ]
countryName             = optional
stateOrProvinceName     = optional
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied

[ req_extensions ]
basicConstraints        = CA:false
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always, issuer
keyUsage                = digitalSignature, keyEncipherment, keyAgreement
extendedKeyUsage        = serverAuth, clientAuth
subjectAltName          = $ENV::SUBJECT_ALT_NAME

' &gt;CA/int-ca/sign.conf
</pre>
<p>The primary difference is in the <tt class="docutils literal">req_extensions</tt> section setting up for the certificates signed by this CA.  One of the bits often missed is the inclusion of the <tt class="docutils literal">subjectAltName</tt> that matches the <tt class="docutils literal">commonName</tt> and optionally includes additional names that the certificate is valid for.</p>
</li>
<li><p class="first">Generate a signing request:</p>
<pre class="literal-block">
openssl req \
    -sha1 \
    -nodes \
    -newkey rsa \
    -keyout CA/int-ca/private/cert.example.com.key \
    -out CA/int-ca/cert.example.com.csr \
    -subj '/O=Example Inc./OU=Servers/CN=cert.example.com'
</pre>
</li>
<li><p class="first">Sign the CSR, with an optional value for <tt class="docutils literal">subjectAltName</tt>:</p>
<pre class="literal-block">
SUBJECT_ALT_NAME=&quot;DNS: cert.example.com&quot; \
openssl ca -config CA/int-ca/sign.conf -extensions req_extensions -days 365 -notext \
    -out CA/int-ca/cert.example.com.crt \
    -in CA/int-ca/cert.example.com.csr \
    -batch
</pre>
<p>Setting the <tt class="docutils literal">SUBJECT_ALT_NAME</tt> environment variable is the easiest way to set <tt class="docutils literal">subjectAltName</tt> without rewriting the config file for each certificate.</p>
</li>
<li><p class="first">Take a peek at the server certificate:</p>
<pre class="literal-block">
openssl x509 -noout -text -in CA/int-ca/cert.example.com.pem
</pre>
</li>
</ul>
</div>
<div class="section" id="setting-up-the-server">
<h1>Setting Up the Server</h1>
<p>Server configurations differ but most will require the server certificate fiel created in the last step, the provate key file created in the CSR step and the CA chain file created in the previous section.  This is where encrypting the private key can make testing difficult and why we did not do that here.</p>
<p>Later installations in this series will demonstrate how to do this using the SSL/TLS proxy server <tt class="docutils literal">stud</tt>.</p>
<hr class="docutils" />
<table class="docutils footnote" frame="void" id="id3" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td><a class="reference external" href="https://www.google.com/search?q=http+vs+https">Find more about http vs https</a></td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id4" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id2">[2]</a></td><td><a class="reference external" href="http://www.google.com/search?q=openssl+certificate+authority">Find more about creating a CA with OpenSSL</a></td></tr>
</tbody>
</table>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>A Fedora 17 Image for OpenStack</title>
      <link>http://hackstack.org/x/blog/2012/11/13/a-fedora-17-image-for-openstack</link>
      <pubDate>Tue, 13 Nov 2012 11:13:00 CST</pubDate>
      <category><![CDATA[openstack]]></category>
      <category><![CDATA[fedora]]></category>
      <guid isPermaLink="false">yvYpRvk7kktXtE6rMWCqHSLLam4=</guid>
      <description>A Fedora 17 Image for OpenStack</description>
      <content:encoded><![CDATA[<div class="document">
<p><em>This worked well enough but has been superceeded by ``appliance-creator``</em></p>
<p>Ubuntu has these nice UEC images that make a great base for cloud appliances.  Fedora has nothing official although there are a couple of older images floating around (links please!).  Nothing for Fedora 17 though.  Let's build one!</p>
<p>The most flexible image builder seems to be oz, as it runs the standard install process and can build nearly anything that boots in KVM.  There are some specific <a class="reference external" href="http://libguestfs.org/guestfs-faq.1.html">requirements for libguestfs</a> and that usually doesn't work properly in a VM.  This all had to be done on bare metal.</p>
<p>Even then, building a Fedora 17 image required Fedora 17. OK, I found an old laptop that could do it and installed f17.</p>
<p>There are also some kickstart files floating around like <a class="reference external" href="https://github.com/rackerjoe/oz-image-build">Racker Joe's repo</a>  and I've stolen from them and from the default kickstart files in Oz.  So here's the <a class="reference external" href="/x/files/fedora17-x86_64.ks">bastard child</a>.</p>
<div class="section" id="oz">
<h1>Oz</h1>
<p>I had to build Oz from source as none of the available packages were current enough:</p>
<pre class="literal-block">
git clone https://github.com/clalancette/oz.git
cd oz
make rpm
sudo yum update ~/rpmbuild/RPMS/noarch/oz-0.10.0-0.20121022223625git17f9c7f.fc17.noarch.rpm
</pre>
<p>Build an image:</p>
<pre class="literal-block">
sudo oz-install -d4 -t6000 -u fedora17-x86_64.tdl -a fedora17-x86_64.ks
qemu-img convert -c -O qcow2 /var/lib/libvirt/images/fedora17-x86_64.dsk fedora17-x86_64.qcow2
</pre>
<p>Upload and boot the image:</p>
<pre class="literal-block">
glance image-create --is-public true --name &quot;Fedora 17 test 2&quot; --disk-format qcow2 --container-format bare --file fedora17-x86_64.qcow2
nova boot --image 94ceb563-41ee-43f6-a999-a3b738c0d299 --flavor 2 --key-name bunsen f17-2
</pre>
<p>This image still has some tweaking needed...</p>
</div>
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>
